<<<<<<< HEAD
{"version":3,"sources":["Rte.css","../../../Build/bower_components/foundation-sites/scss/foundation.scss","Base/_font-import.scss","../../../Build/bower_components/foundation-sites/scss/typography/_base.scss","_settings.scss","../../../Build/bower_components/foundation-sites/scss/util/_unit.scss","../../../Build/bower_components/foundation-sites/scss/util/_breakpoint.scss","../../../Build/bower_components/foundation-sites/scss/typography/_helpers.scss","../../../Build/bower_components/foundation-sites/scss/typography/_alignment.scss","../../../Build/bower_components/foundation-sites/scss/typography/_print.scss","../../../Build/bower_components/foundation-sites/scss/components/_table.scss","../../../Build/bower_components/foundation-sites/scss/util/_color.scss","Base/_typography.scss"],"names":[],"mappings":"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","file":"../Rte.css","sourcesContent":["@charset \"UTF-8\";\n/**\n * Foundation for Sites by ZURB\n * Version 6.4.3\n * foundation.zurb.com\n * Licensed under MIT Open Source\n */\n@font-face {\n  font-family: \"Lato\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"../Fonts/Lato/LatoLatin-Regular.woff2\") format(\"woff2\"), url(\"../Fonts/Lato/LatoLatin-Regular.woff\") format(\"woff\"), url(\"../Fonts/Lato/LatoLatin-Regular.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"Lato\";\n  font-style: italic;\n  font-weight: 400;\n  src: url(\"../Fonts/Lato/LatoLatin-Italic.woff2\") format(\"woff2\"), url(\"../Fonts/Lato/LatoLatin-Italic.woff\") format(\"woff\"), url(\"../Fonts/Lato/LatoLatin-Italic.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"Lato\";\n  font-style: normal;\n  font-weight: 700;\n  src: url(\"../Fonts/Lato/LatoLatin-Bold.woff2\") format(\"woff2\"), url(\"../Fonts/Lato/LatoLatin-Bold.woff\") format(\"woff\"), url(\"../Fonts/Lato/LatoLatin-Bold.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"Lato\";\n  font-style: italic;\n  font-weight: 700;\n  src: url(\"../Fonts/Lato/LatoLatin-BoldItalic.woff2\") format(\"woff2\"), url(\"../Fonts/Lato/LatoLatin-BoldItalic.woff\") format(\"woff\"), url(\"../Fonts/Lato/LatoLatin-BoldItalic.ttf\") format(\"truetype\"); }\n\ndiv,\ndl,\ndt,\ndd,\nul,\nol,\nli,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\npre,\nform,\np,\nblockquote,\nth,\ntd {\n  margin: 0;\n  padding: 0; }\n\np {\n  margin-bottom: 1rem;\n  font-size: inherit;\n  line-height: 1.6;\n  text-rendering: optimizeLegibility; }\n\nem,\ni {\n  font-style: italic;\n  line-height: inherit; }\n\nstrong,\nb {\n  font-weight: bold;\n  line-height: inherit; }\n\nsmall {\n  font-size: 80%;\n  line-height: inherit; }\n\nh1, .h1,\nh2, .h2,\nh3, .h3,\nh4, .h4,\nh5, .h5,\nh6, .h6 {\n  font-family: Lato, Helvetica, Roboto, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  color: inherit;\n  text-rendering: optimizeLegibility; }\n  h1 small, .h1 small,\n  h2 small, .h2 small,\n  h3 small, .h3 small,\n  h4 small, .h4 small,\n  h5 small, .h5 small,\n  h6 small, .h6 small {\n    line-height: 0;\n    color: #cacaca; }\n\nh1, .h1 {\n  font-size: 1.5rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh2, .h2 {\n  font-size: 1.25rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh3, .h3 {\n  font-size: 1.1875rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh4, .h4 {\n  font-size: 1.125rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh5, .h5 {\n  font-size: 1.0625rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh6, .h6 {\n  font-size: 1rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\n@media print, screen and (min-width: 37.5em) {\n  h1, .h1 {\n    font-size: 3rem; }\n  h2, .h2 {\n    font-size: 2.5rem; }\n  h3, .h3 {\n    font-size: 1.9375rem; }\n  h4, .h4 {\n    font-size: 1.5625rem; }\n  h5, .h5 {\n    font-size: 1.25rem; }\n  h6, .h6 {\n    font-size: 1rem; } }\n\na {\n  line-height: inherit;\n  color: #e87c0c;\n  text-decoration: none;\n  cursor: pointer; }\n  a:hover, a:focus {\n    color: #c86b0a; }\n  a img {\n    border: 0; }\n\nhr {\n  clear: both;\n  max-width: 60rem;\n  height: 0;\n  margin: 1.25rem auto;\n  border-top: 0;\n  border-right: 0;\n  border-bottom: 1px solid #cacaca;\n  border-left: 0; }\n\nul,\nol,\ndl {\n  margin-bottom: 1rem;\n  list-style-position: outside;\n  line-height: 1.6; }\n\nli {\n  font-size: inherit; }\n\nul {\n  margin-left: 1.25rem;\n  list-style-type: disc; }\n\nol {\n  margin-left: 1.25rem; }\n\nul ul, ol ul, ul ol, ol ol {\n  margin-left: 1.25rem;\n  margin-bottom: 0; }\n\ndl {\n  margin-bottom: 1rem; }\n  dl dt {\n    margin-bottom: 0.3rem;\n    font-weight: bold; }\n\nblockquote {\n  margin: 0 0 1rem;\n  padding: 0.5625rem 1.25rem 0 1.1875rem;\n  border-left: 1px solid #cacaca; }\n  blockquote, blockquote p {\n    line-height: 1.6;\n    color: #8a8a8a; }\n\ncite {\n  display: block;\n  font-size: 0.8125rem;\n  color: #8a8a8a; }\n  cite:before {\n    content: \"— \"; }\n\nabbr, abbr[title] {\n  border-bottom: 1px dotted #0a0a0a;\n  cursor: help;\n  text-decoration: none; }\n\nfigure {\n  margin: 0; }\n\ncode {\n  padding: 0.125rem 0.3125rem 0.0625rem;\n  border: none;\n  background-color: inherit;\n  font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n  font-weight: normal;\n  color: #0a0a0a; }\n\nkbd {\n  margin: 0;\n  padding: 0.125rem 0.25rem 0;\n  background-color: #e6e6e6;\n  font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n  color: #0a0a0a; }\n\n.subheader {\n  margin-top: 0.2rem;\n  margin-bottom: 0.5rem;\n  font-weight: normal;\n  line-height: 1.4;\n  color: #8a8a8a; }\n\n.lead {\n  font-size: 125%;\n  line-height: 1.6; }\n\n.stat {\n  font-size: 2.5rem;\n  line-height: 1; }\n  p + .stat {\n    margin-top: -1rem; }\n\nul.no-bullet, ol.no-bullet {\n  margin-left: 0;\n  list-style: none; }\n\n.text-left {\n  text-align: left; }\n\n.text-right {\n  text-align: right; }\n\n.text-center {\n  text-align: center; }\n\n.text-justify {\n  text-align: justify; }\n\n@media print, screen and (min-width: 37.5em) {\n  .medium-text-left {\n    text-align: left; }\n  .medium-text-right {\n    text-align: right; }\n  .medium-text-center {\n    text-align: center; }\n  .medium-text-justify {\n    text-align: justify; } }\n\n@media print, screen and (min-width: 60em) {\n  .large-text-left {\n    text-align: left; }\n  .large-text-right {\n    text-align: right; }\n  .large-text-center {\n    text-align: center; }\n  .large-text-justify {\n    text-align: justify; } }\n\n.show-for-print {\n  display: none !important; }\n\n@media print {\n  * {\n    background: transparent !important;\n    box-shadow: none !important;\n    color: black !important;\n    text-shadow: none !important; }\n  .show-for-print {\n    display: block !important; }\n  .hide-for-print {\n    display: none !important; }\n  table.show-for-print {\n    display: table !important; }\n  thead.show-for-print {\n    display: table-header-group !important; }\n  tbody.show-for-print {\n    display: table-row-group !important; }\n  tr.show-for-print {\n    display: table-row !important; }\n  td.show-for-print {\n    display: table-cell !important; }\n  th.show-for-print {\n    display: table-cell !important; }\n  a,\n  a:visited {\n    text-decoration: underline; }\n  a[href]:after {\n    content: \" (\" attr(href) \")\"; }\n  .ir a:after,\n  a[href^='javascript:']:after,\n  a[href^='#']:after {\n    content: ''; }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\"; }\n  pre,\n  blockquote {\n    border: 1px solid #8a8a8a;\n    page-break-inside: avoid; }\n  thead {\n    display: table-header-group; }\n  tr,\n  img {\n    page-break-inside: avoid; }\n  img {\n    max-width: 100% !important; }\n  @page {\n    margin: 0.5cm; }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3; }\n  h2,\n  h3 {\n    page-break-after: avoid; }\n  .print-break-inside {\n    page-break-inside: auto; } }\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n  margin-bottom: 1rem;\n  border-radius: 0; }\n  table thead,\n  table tbody,\n  table tfoot {\n    border: 1px solid #f1f1f1;\n    background-color: #fefefe; }\n  table caption {\n    padding: 0.5rem 0.625rem 0.625rem;\n    font-weight: bold; }\n  table thead {\n    background: #f8f8f8;\n    color: #0a0a0a; }\n  table tfoot {\n    background: #f1f1f1;\n    color: #0a0a0a; }\n  table thead tr,\n  table tfoot tr {\n    background: transparent; }\n  table thead th,\n  table thead td,\n  table tfoot th,\n  table tfoot td {\n    padding: 0.5rem 0.625rem 0.625rem;\n    font-weight: bold;\n    text-align: left; }\n  table tbody th,\n  table tbody td {\n    padding: 0.5rem 0.625rem 0.625rem; }\n  table tbody tr:nth-child(even) {\n    border-bottom: 0;\n    background-color: #f1f1f1; }\n  table.unstriped tbody {\n    background-color: #fefefe; }\n    table.unstriped tbody tr {\n      border-bottom: 0;\n      border-bottom: 1px solid #f1f1f1;\n      background-color: #fefefe; }\n\n@media screen and (max-width: 59.9375em) {\n  table.stack thead {\n    display: none; }\n  table.stack tfoot {\n    display: none; }\n  table.stack tr,\n  table.stack th,\n  table.stack td {\n    display: block; }\n  table.stack td {\n    border-top: 0; } }\n\ntable.scroll {\n  display: block;\n  width: 100%;\n  overflow-x: auto; }\n\ntable.hover thead tr:hover {\n  background-color: #f3f3f3; }\n\ntable.hover tfoot tr:hover {\n  background-color: #ececec; }\n\ntable.hover tbody tr:hover {\n  background-color: #f9f9f9; }\n\ntable.hover:not(.unstriped) tr:nth-of-type(even):hover {\n  background-color: #ececec; }\n\n.table-scroll {\n  overflow-x: auto; }\n  .table-scroll table {\n    width: auto; }\n\n.cke_editable {\n  font-size: 100%;\n  font-family: Lato, Helvetica, Roboto, Arial, sans-serif; }\n\n/* Left, center, right and justify alignment of text in block elements*/\np.align-left, td.align-left, th.align-left,\nh1.align-left, h2.align-left, h3.align-left, h4.align-left, h5.align-left, h6.align-left,\ndiv.align-left, address.align-left {\n  text-align: left; }\n\np.align-center, td.align-center, th.align-center,\nh1.align-center, h2.align-center, h3.align-center, h4.align-center, h5.align-center, h6.align-center,\ndiv.align-center, address.align-center {\n  text-align: center; }\n\np.align-right, td.align-right, th.align-right,\nh1.align-right, h2.align-right, h3.align-right, h4.align-right, h5.align-right, h6.align-right,\ndiv.align-right, address.align-right {\n  text-align: right; }\n\np.align-justify, td.align-justify, th.align-justify,\nh1.align-justify, h2.align-justify, h3.align-justify, h4.align-justify, h5.align-justify, h6.align-justify,\ndiv.align-justify, address.align-justify {\n  text-align: justify; }\n\nspan.c-important {\n  color: #f90; }\n\nspan.c-tiny {\n  color: #999999;\n  font-size: 75%; }\n\np.p-tiny {\n  color: #999999;\n  font-size: 75%; }\n\n/* Bullet styles for unordered lists.*/\nul.component-items {\n  color: #186900;\n  list-style-type: circle; }\n\nul.ul-style1 {\n  color: #8A0020; }\n\n/* Numbering styles for ordered lists.*/\nol.ul-style2 {\n  color: #10007B;\n  list-style-type: lower-roman; }\n\n/* Selectors for the default configuration of the link accessibity feature.*/\n/* Default selector for indentation.*/\ndiv.indent {\n  margin-left: 2em; }\n","/**\n * Foundation for Sites by ZURB\n * Version 6.4.3\n * foundation.zurb.com\n * Licensed under MIT Open Source\n */\n\n// Dependencies\n@import '../_vendor/normalize-scss/sass/normalize';\n@import '../_vendor/sassy-lists/stylesheets/helpers/missing-dependencies';\n@import '../_vendor/sassy-lists/stylesheets/helpers/true';\n@import '../_vendor/sassy-lists/stylesheets/functions/contain';\n@import '../_vendor/sassy-lists/stylesheets/functions/purge';\n@import '../_vendor/sassy-lists/stylesheets/functions/remove';\n@import '../_vendor/sassy-lists/stylesheets/functions/replace';\n@import '../_vendor/sassy-lists/stylesheets/functions/to-list';\n\n// Settings\n// import your own `settings` here or\n// import and modify the default settings through\n// @import 'settings/settings';\n\n// Sass utilities\n@import 'util/util';\n\n// Global variables and styles\n@import 'global';\n\n// Components\n@import 'grid/grid';\n@import 'xy-grid/xy-grid';\n@import 'typography/typography';\n@import 'forms/forms';\n@import 'components/visibility';\n@import 'components/float';\n@import 'components/button';\n@import 'components/button-group';\n@import 'components/accordion-menu';\n@import 'components/accordion';\n@import 'components/badge';\n@import 'components/breadcrumbs';\n@import 'components/callout';\n@import 'components/card';\n@import 'components/close-button';\n@import 'components/drilldown';\n@import 'components/dropdown-menu';\n@import 'components/dropdown';\n@import 'components/flex';\n@import 'components/responsive-embed';\n@import 'components/label';\n@import 'components/media-object';\n@import 'components/menu';\n@import 'components/menu-icon';\n@import 'components/off-canvas';\n@import 'components/orbit';\n@import 'components/pagination';\n@import 'components/progress-bar';\n@import 'components/reveal';\n@import 'components/slider';\n@import 'components/sticky';\n@import 'components/switch';\n@import 'components/table';\n@import 'components/tabs';\n@import 'components/title-bar';\n@import 'components/top-bar';\n@import 'components/thumbnail';\n@import 'components/tooltip';\n@import 'prototype/prototype';\n\n@mixin foundation-everything(\n  $flex: true,\n  $prototype: false\n) {\n  @if $flex {\n    $global-flexbox: true !global;\n  }\n\n  @include foundation-global-styles;\n  @if not $flex {\n    @include foundation-grid;\n  }\n  @else {\n    @if $xy-grid {\n      @include foundation-xy-grid-classes;\n    }\n    @else {\n      @include foundation-flex-grid;\n    }\n  }\n  @include foundation-typography;\n  @include foundation-forms;\n  @include foundation-button;\n  @include foundation-accordion;\n  @include foundation-accordion-menu;\n  @include foundation-badge;\n  @include foundation-breadcrumbs;\n  @include foundation-button-group;\n  @include foundation-callout;\n  @include foundation-card;\n  @include foundation-close-button;\n  @include foundation-menu;\n  @include foundation-menu-icon;\n  @include foundation-drilldown-menu;\n  @include foundation-dropdown;\n  @include foundation-dropdown-menu;\n  @include foundation-responsive-embed;\n  @include foundation-label;\n  @include foundation-media-object;\n  @include foundation-off-canvas;\n  @include foundation-orbit;\n  @include foundation-pagination;\n  @include foundation-progress-bar;\n  @include foundation-slider;\n  @include foundation-sticky;\n  @include foundation-reveal;\n  @include foundation-switch;\n  @include foundation-table;\n  @include foundation-tabs;\n  @include foundation-thumbnail;\n  @include foundation-title-bar;\n  @include foundation-tooltip;\n  @include foundation-top-bar;\n  @include foundation-visibility-classes;\n  @include foundation-float-classes;\n\n  @if $flex {\n    @include foundation-flex-classes;\n  }\n\n  @if $prototype {\n    @include foundation-prototype-classes;\n  }\n}\n","@function str-replace($string, $search, $replace: \"\") {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n}\n\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n      eot: \"?\",\n      svg: \"#\" + str-replace($name, \" \", \"_\")\n  );\n\n  $formats: (\n      otf: \"opentype\",\n      ttf: \"truetype\"\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + \".\" + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n}\n\n//Lato\n@include font-face('Lato', '#{$font-path}Lato/LatoLatin-Regular', 400, normal, woff2 woff ttf);\n@include font-face('Lato', '#{$font-path}Lato/LatoLatin-Italic', 400, italic, woff2 woff ttf);\n@include font-face('Lato', '#{$font-path}Lato/LatoLatin-Bold', 700, normal, woff2 woff ttf);\n@include font-face('Lato', '#{$font-path}Lato/LatoLatin-BoldItalic', 700, italic, woff2 woff ttf);\n\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group typography-base\n////\n\n// Base Typography\n// - - - - - - - - - - - - - - -\n// These are styles applied to basic HTML tags, including:\n//   - Paragraphs <p>\n//   - Bold/italics <b> <strong> <i> <em>\n//   - Small text <small>\n//   - Headings <h1>-<h6>\n//   - Anchors <a>\n//   - Dividers <hr>\n//   - Lists <ul> <ol> <dl>\n//   - Blockquotes <blockquote>\n//   - Code blocks <code>\n//   - Abbreviations <abbr>\n//   - Citations <cite>\n//   - Keystrokes <kbd>\n\n/// Font family for header elements.\n/// @type String | List\n$header-font-family: $body-font-family !default;\n\n/// Font weight of headers.\n/// @type String\n$header-font-weight: $global-weight-normal !default;\n\n/// Font style (e.g. italicized) of headers.\n/// @type String\n$header-font-style: normal !default;\n\n/// Font stack used for elements that use monospaced type, such as code samples\n/// @type String | List\n$font-family-monospace: Consolas, 'Liberation Mono', Courier, monospace !default;\n\n/// Color of headers.\n/// @type Color\n$header-color: inherit !default;\n\n/// Line height of headers.\n/// @type Number\n$header-lineheight: 1.4 !default;\n\n/// Bottom margin of headers.\n/// @type Number\n$header-margin-bottom: 0.5rem !default;\n\n/// Styles for headings at various screen sizes. Each key is a breakpoint, and each value is a map of heading styles.\n/// @type Map\n$header-styles: (\n  small: (\n    'h1': ('font-size': 24),\n    'h2': ('font-size': 20),\n    'h3': ('font-size': 19),\n    'h4': ('font-size': 18),\n    'h5': ('font-size': 17),\n    'h6': ('font-size': 16),\n  ),\n  medium: (\n    'h1': ('font-size': 48),\n    'h2': ('font-size': 40),\n    'h3': ('font-size': 31),\n    'h4': ('font-size': 25),\n    'h5': ('font-size': 20),\n    'h6': ('font-size': 16),\n  ),\n) !default;\n\n// $header-styles map is built from $header-sizes in order to ensure downward compatibility\n// when $header-sizes is depreciated, $header-styles needs to get !default values like settings.scss\n@function build_from_header-sizes($header-sizes) {\n  @warn 'Note, that $header-sizes has been replaced with $header-styles. $header-sizes still works, but it is going to be depreciated.';\n  $header-styles: ();\n  @each $size, $headers in $header-sizes {\n    $header-map: ();\n    @each $header, $font-size in $headers {\n      $header-map: map-merge($header-map, ($header: ('font-size': $font-size)));  \n    }\n    $header-styles: map-merge($header-styles, ($size: $header-map));\n  }\n  @return $header-styles;\n}\n\n// If it exists $headers-sizes is used to build $header-styles. See the documentation.\n@if variable-exists(header-sizes) {\n  $header-styles: build_from_header-sizes($header-sizes);\n}\n\n/// Text rendering method of headers.\n/// @type String\n$header-text-rendering: optimizeLegibility !default;\n\n/// Font size of `<small>` elements.\n/// @type Number\n$small-font-size: 80% !default;\n\n/// Color of `<small>` elements when placed inside headers.\n/// @type Color\n$header-small-font-color: $medium-gray !default;\n\n/// Line height of text inside `<p>` elements.\n/// @type Number\n$paragraph-lineheight: 1.6 !default;\n\n/// Bottom margin of paragraphs.\n/// @type Number\n$paragraph-margin-bottom: 1rem !default;\n\n/// Text rendering method for paragraph text.\n/// @type String\n$paragraph-text-rendering: optimizeLegibility !default;\n\n/// Text color of code samples.\n/// @type Color\n$code-color: $black !default;\n\n/// Font family of code samples.\n/// @type String | List\n$code-font-family: $font-family-monospace !default;\n\n/// Font weight of text in code samples.\n/// @type String\n$code-font-weight: $global-weight-normal !default;\n\n/// Background color of code samples.\n/// @type Color\n$code-background: $light-gray !default;\n\n/// Border around code samples.\n/// @type List\n$code-border: 1px solid $medium-gray !default;\n\n/// Padding around text of code samples.\n/// @type Number | List\n$code-padding: rem-calc(2 5 1) !default;\n\n/// Default color for links.\n/// @type Color\n$anchor-color: $primary-color !default;\n\n/// Default color for links on hover.\n/// @type Color\n$anchor-color-hover: scale-color($anchor-color, $lightness: -14%) !default;\n\n/// Default text decoration for links.\n/// @type String\n$anchor-text-decoration: none !default;\n\n/// Default text decoration for links on hover.\n/// @type String\n$anchor-text-decoration-hover: none !default;\n\n/// Maximum width of a divider.\n/// @type Number\n$hr-width: $global-width !default;\n\n/// Default border for a divider.\n/// @type List\n$hr-border: 1px solid $medium-gray !default;\n\n/// Default margin for a divider.\n/// @type Number | List\n$hr-margin: rem-calc(20) auto !default;\n\n/// Line height for items in a list.\n/// @type Number\n$list-lineheight: $paragraph-lineheight !default;\n\n/// Bottom margin for items in a list.\n/// @type Number\n$list-margin-bottom: $paragraph-margin-bottom !default;\n\n/// Bullet type to use for unordered lists (e.g., `square`, `circle`, `disc`).\n/// @type String\n$list-style-type: disc !default;\n\n/// Positioning for bullets on unordered list items.\n/// @type String\n$list-style-position: outside !default;\n\n/// Left (or right) margin for lists.\n/// @type Number\n$list-side-margin: 1.25rem !default;\n\n/// Left (or right) margin for a list inside a list.\n/// @type Number\n$list-nested-side-margin: 1.25rem !default;\n\n/// Bottom margin for `<dl>` elements.\n/// @type Number\n$defnlist-margin-bottom: 1rem !default;\n\n/// Font weight for `<dt>` elements.\n/// @type String\n$defnlist-term-weight: $global-weight-bold !default;\n\n/// Spacing between `<dt>` and `<dd>` elements.\n/// @type Number\n$defnlist-term-margin-bottom: 0.3rem !default;\n\n/// Text color of `<blockquote>` elements.\n/// @type Color\n$blockquote-color: $dark-gray !default;\n\n/// Padding inside a `<blockquote>` element.\n/// @type Number | List\n$blockquote-padding: rem-calc(9 20 0 19) !default;\n\n/// Side border for `<blockquote>` elements.\n/// @type List\n$blockquote-border: 1px solid $medium-gray !default;\n\n/// Font size for `<cite>` elements.\n/// @type Number\n$cite-font-size: rem-calc(13) !default;\n\n/// Text color for `<cite>` elements.\n/// @type Color\n$cite-color: $dark-gray !default;\n\n/// Pseudo content for `<cite>` elements.\n/// @type String\n$cite-pseudo-content: '\\2014 \\0020' !default;\n\n/// Font family for `<kbd>` elements.\n/// @type String | List\n$keystroke-font: $font-family-monospace !default;\n\n/// Text color for `<kbd>` elements.\n/// @type Color\n$keystroke-color: $black !default;\n\n/// Background color for `<kbd>` elements.\n/// @type Color\n$keystroke-background: $light-gray !default;\n\n/// Padding for `<kbd>` elements.\n/// @type Number | List\n$keystroke-padding: rem-calc(2 4 0) !default;\n\n/// Border radius for `<kbd>` elements.\n/// @type Number | List\n$keystroke-radius: $global-radius !default;\n\n/// Bottom border style for `<abbr>` elements.\n/// @type List\n$abbr-underline: 1px dotted $black !default;\n\n@mixin foundation-typography-base {\n  // Typography resets\n  div,\n  dl,\n  dt,\n  dd,\n  ul,\n  ol,\n  li,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  pre,\n  form,\n  p,\n  blockquote,\n  th,\n  td {\n    margin: 0;\n    padding: 0;\n  }\n\n  // Paragraphs\n  p {\n    margin-bottom: $paragraph-margin-bottom;\n\n    font-size: inherit;\n    line-height: $paragraph-lineheight;\n    text-rendering: $paragraph-text-rendering;\n  }\n\n  // Emphasized text\n  em,\n  i {\n    font-style: italic;\n    line-height: inherit;\n  }\n\n  // Strong text\n  strong,\n  b {\n    font-weight: $global-weight-bold;\n    line-height: inherit;\n  }\n\n  // Small text\n  small {\n    font-size: $small-font-size;\n    line-height: inherit;\n  }\n\n  // Headings\n  h1, .h1,\n  h2, .h2,\n  h3, .h3,\n  h4, .h4,\n  h5, .h5,\n  h6, .h6 {\n    font-family: $header-font-family;\n    font-style: $header-font-style;\n    font-weight: $header-font-weight;\n    color: $header-color;\n    text-rendering: $header-text-rendering;\n\n    small {\n      line-height: 0;\n      color: $header-small-font-color;\n    }\n  }\n\n  // Heading styles\n  @each $size, $headers in $header-styles {\n    @include breakpoint($size) {\n      @each $header, $header-defs in $headers {\n        $font-size-temp: 1rem;\n        #{$header}, .#{$header} {\n\n          @if map-has-key($header-defs, font-size) {\n            $font-size-temp: rem-calc(map-get($header-defs, font-size));\n            font-size: $font-size-temp;\n          } @else if map-has-key($header-defs, fs) {\n            $font-size-temp: rem-calc(map-get($header-defs, fs));\n            font-size: $font-size-temp;\n          } @else if $size == $-zf-zero-breakpoint {\n            font-size: $font-size-temp;\n          }\n          @if map-has-key($header-defs, line-height) {\n            line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);\n          } @else if map-has-key($header-defs, lh) {\n            line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);\n          } @else if $size == $-zf-zero-breakpoint {\n            line-height: unitless-calc($header-lineheight, $font-size-temp);\n          }\n\n          @if map-has-key($header-defs, margin-top) {\n            margin-top: rem-calc(map-get($header-defs, margin-top));\n          } @else if map-has-key($header-defs, mt) {\n            margin-top: rem-calc(map-get($header-defs, mt));\n          } @else if $size == $-zf-zero-breakpoint {\n            margin-top: 0;\n          }\n          @if map-has-key($header-defs, margin-bottom) {\n            margin-bottom: rem-calc(map-get($header-defs, margin-bottom));\n          } @else if map-has-key($header-defs, mb) {\n            margin-bottom: rem-calc(map-get($header-defs, mb));\n          } @else if $size == $-zf-zero-breakpoint {\n            margin-bottom: rem-calc($header-margin-bottom);\n          }\n        }\n      }\n    }\n  }\n\n  // Links\n  a {\n    line-height: inherit;\n    color: $anchor-color;\n    text-decoration: $anchor-text-decoration;\n\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      color: $anchor-color-hover;\n      @if $anchor-text-decoration-hover != $anchor-text-decoration {\n        text-decoration: $anchor-text-decoration-hover;\n      }\n    }\n\n    img {\n      border: 0;\n    }\n  }\n\n  // Horizontal rule\n  hr {\n    clear: both;\n\n    max-width: $hr-width;\n    height: 0;\n    margin: $hr-margin;\n\n    border-top: 0;\n    border-right: 0;\n    border-bottom: $hr-border;\n    border-left: 0;\n  }\n\n  // Lists\n  ul,\n  ol,\n  dl {\n    margin-bottom: $list-margin-bottom;\n    list-style-position: $list-style-position;\n    line-height: $list-lineheight;\n  }\n\n  // List items\n  li {\n    font-size: inherit;\n  }\n\n  // Unordered lists\n  ul {\n    margin-#{$global-left}: $list-side-margin;\n    list-style-type: $list-style-type;\n  }\n\n  // Ordered lists\n  ol {\n    margin-#{$global-left}: $list-side-margin;\n  }\n\n  // Nested unordered/ordered lists\n  ul, ol {\n    & & {\n      margin-#{$global-left}: $list-nested-side-margin;\n      margin-bottom: 0;\n    }\n  }\n\n  // Definition lists\n  dl {\n    margin-bottom: $defnlist-margin-bottom;\n\n    dt {\n      margin-bottom: $defnlist-term-margin-bottom;\n      font-weight: $defnlist-term-weight;\n    }\n  }\n\n  // Blockquotes\n  blockquote {\n    margin: 0 0 $paragraph-margin-bottom;\n    padding: $blockquote-padding;\n    border-#{$global-left}: $blockquote-border;\n\n    &, p {\n      line-height: $paragraph-lineheight;\n      color: $blockquote-color;\n    }\n  }\n\n  // Citations\n  cite {\n    display: block;\n    font-size: $cite-font-size;\n    color: $cite-color;\n\n    &:before {\n      content: $cite-pseudo-content;\n    }\n  }\n\n  // Abbreviations\n  abbr, abbr[title] {\n    border-bottom: $abbr-underline;\n    cursor: help;\n    text-decoration: none;\n  }\n\n  // Figures\n  figure {\n    margin: 0;\n  }\n  \n  // Code\n  code {\n    padding: $code-padding;\n\n    border: $code-border;\n    background-color: $code-background;\n\n    font-family: $code-font-family;\n    font-weight: $code-font-weight;\n    color: $code-color;\n  }\n\n  // Keystrokes\n  kbd {\n    margin: 0;\n    padding: $keystroke-padding;\n\n    background-color: $keystroke-background;\n\n    font-family: $keystroke-font;\n    color: $keystroke-color;\n\n    @if has-value($keystroke-radius) {\n      border-radius: $keystroke-radius;\n    }\n  }\n}\n","//  Foundation for Sites Settings\n//  -----------------------------\n//\n//  Table of Contents:\n//\n//   1. Global\n//   2. Breakpoints\n//   3. The Grid\n//   4. Base Typography\n//   5. Typography Helpers\n//   6. Abide\n//   7. Accordion\n//   8. Accordion Menu\n//   9. Badge\n//  10. Breadcrumbs\n//  11. Button\n//  12. Button Group\n//  13. Callout\n//  14. Card\n//  15. Close Button\n//  16. Drilldown\n//  17. Dropdown\n//  18. Dropdown Menu\n//  19. Flexbox Utilities\n//  20. Forms\n//  21. Label\n//  22. Media Object\n//  23. Menu\n//  24. Meter\n//  25. Off-canvas\n//  26. Orbit\n//  27. Pagination\n//  28. Progress Bar\n//  29. Prototype Arrow\n//  30. Prototype Border-Box\n//  31. Prototype Border-None\n//  32. Prototype Bordered\n//  33. Prototype Display\n//  34. Prototype Font-Styling\n//  35. Prototype List-Style-Type\n//  36. Prototype Overflow\n//  37. Prototype Position\n//  38. Prototype Rounded\n//  39. Prototype Separator\n//  40. Prototype Shadow\n//  41. Prototype Sizing\n//  42. Prototype Spacing\n//  43. Prototype Text-Decoration\n//  44. Prototype Text-Transformation\n//  45. Prototype Text-Utilities\n//  46. Responsive Embed\n//  47. Reveal\n//  48. Slider\n//  49. Switch\n//  50. Table\n//  51. Tabs\n//  52. Thumbnail\n//  53. Title Bar\n//  54. Tooltip\n//  55. Top Bar\n//  56. Xy Grid\n@import '../../../Build/bower_components/foundation-sites/scss/util/util';\n\n//Project\n//\n$baseline: 22px;\n\n$column-spacing: 8px;\n$row-spacing: 8px;\n$text-margin: 16px;\n$max-width-intext: 48%;\n\n$border-width: 2px;\n$border-color: #000;\n$border-padding: 0;\n\n$frame-spaces: (\n    extra-small: 0.5rem,\n    small: 1rem,\n    medium: 1.5rem,\n    large: 2rem,\n    extra-large: 2.5rem\n);\n\n// 1. Global\n// ---------\n\n$global-font-size: 100%;\n$global-width: rem-calc(960);\n$global-lineheight: 1.5;\n$foundation-palette: (\n    primary: #e87c0c,\n    secondary: #777,\n    success: #3adb76,\n    warning: #ffae00,\n    alert: #ec5840,\n    bg-1: #d8ffbb,\n    bg-2: #ffe4bb,\n    bg-3: #bbe0ff,\n);\n$light-gray: #e6e6e6;\n$medium-gray: #cacaca;\n$dark-gray: #8a8a8a;\n$black: #0a0a0a;\n$white: #fefefe;\n$body-background: $white;\n$body-font-color: $black;\n$body-font-family: Lato, Helvetica, Roboto, Arial, sans-serif;\n$body-antialiased: true;\n$global-margin: 1rem;\n$global-padding: 1rem;\n$global-position: 1rem;\n$global-weight-normal: normal;\n$global-weight-bold: bold;\n$global-radius: 0;\n$global-menu-padding: 0.7rem 1rem;\n$global-menu-nested-margin: 1rem;\n$global-text-direction: ltr;\n$global-flexbox: false;\n$global-prototype-breakpoints: false;\n$global-button-cursor: auto;\n$global-color-pick-contrast-tolerance: 0;\n$print-transparent-backgrounds: true;\n\n@include add-foundation-colors;\n\n// 2. Breakpoints\n// --------------\n\n$breakpoints: (\n    small: 0,\n    medium: 600px,\n    large: 960px,\n    xlarge: 1280px,\n    xxlarge: 1440px,\n);\n$print-breakpoint: large;\n$breakpoint-classes: (small medium large);\n\n// 3. The Grid\n// -----------\n\n$grid-row-width: $global-width;\n$grid-column-count: 12;\n$grid-column-gutter: (\n    small: 15px,\n    medium: 30px,\n);\n$grid-column-align-edge: false;\n$grid-column-alias: 'columns';\n$block-grid-max: 8;\n\n// 4. Base Typography\n// ------------------\n\n$header-font-family: $body-font-family;\n$header-font-weight: $global-weight-normal;\n$header-font-style: normal;\n$font-family-monospace: Consolas, 'Liberation Mono', Courier, monospace;\n$header-color: inherit;\n$header-lineheight: 1.4;\n$header-margin-bottom: 0.5rem;\n$header-styles: (\n    small: (\n        'h1': ('font-size': 24),\n        'h2': ('font-size': 20),\n        'h3': ('font-size': 19),\n        'h4': ('font-size': 18),\n        'h5': ('font-size': 17),\n        'h6': ('font-size': 16),\n    ),\n    medium: (\n        'h1': ('font-size': 48),\n        'h2': ('font-size': 40),\n        'h3': ('font-size': 31),\n        'h4': ('font-size': 25),\n        'h5': ('font-size': 20),\n        'h6': ('font-size': 16),\n    ),\n);\n$header-text-rendering: optimizeLegibility;\n$small-font-size: 80%;\n$header-small-font-color: $medium-gray;\n$paragraph-lineheight: 1.6;\n$paragraph-margin-bottom: 1rem;\n$paragraph-text-rendering: optimizeLegibility;\n$code-color: $black;\n$code-font-family: $font-family-monospace;\n$code-font-weight: $global-weight-normal;\n$code-background: inherit;\n$code-border: none;\n$code-padding: rem-calc(2 5 1);\n$anchor-color: $primary-color;\n$anchor-color-hover: scale-color($anchor-color, $lightness: -14%);\n$anchor-text-decoration: none;\n$anchor-text-decoration-hover: none;\n$hr-width: $global-width;\n$hr-border: 1px solid $medium-gray;\n$hr-margin: rem-calc(20) auto;\n$list-lineheight: $paragraph-lineheight;\n$list-margin-bottom: $paragraph-margin-bottom;\n$list-style-type: disc;\n$list-style-position: outside;\n$list-side-margin: 1.25rem;\n$list-nested-side-margin: 1.25rem;\n$defnlist-margin-bottom: 1rem;\n$defnlist-term-weight: $global-weight-bold;\n$defnlist-term-margin-bottom: 0.3rem;\n$blockquote-color: $dark-gray;\n$blockquote-padding: rem-calc(9 20 0 19);\n$blockquote-border: 1px solid $medium-gray;\n$cite-font-size: rem-calc(13);\n$cite-color: $dark-gray;\n$cite-pseudo-content: '\\2014 \\0020';\n$keystroke-font: $font-family-monospace;\n$keystroke-color: $black;\n$keystroke-background: $light-gray;\n$keystroke-padding: rem-calc(2 4 0);\n$keystroke-radius: $global-radius;\n$abbr-underline: 1px dotted $black;\n\n// 5. Typography Helpers\n// ---------------------\n\n$lead-font-size: $global-font-size * 1.25;\n$lead-lineheight: 1.6;\n$subheader-lineheight: 1.4;\n$subheader-color: $dark-gray;\n$subheader-font-weight: $global-weight-normal;\n$subheader-margin-top: 0.2rem;\n$subheader-margin-bottom: 0.5rem;\n$stat-font-size: 2.5rem;\n\n// 6. Abide\n// --------\n\n$abide-inputs: true;\n$abide-labels: true;\n$input-background-invalid: get-color(alert);\n$form-label-color-invalid: get-color(alert);\n$input-error-color: get-color(alert);\n$input-error-font-size: rem-calc(12);\n$input-error-font-weight: $global-weight-bold;\n\n// 7. Accordion\n// ------------\n\n$accordion-background: $white;\n$accordion-plusminus: true;\n$accordion-title-font-size: rem-calc(12);\n$accordion-item-color: $primary-color;\n$accordion-item-background-hover: $light-gray;\n$accordion-item-padding: 1.25rem 1rem;\n$accordion-content-background: $white;\n$accordion-content-border: 1px solid $light-gray;\n$accordion-content-color: $body-font-color;\n$accordion-content-padding: 1rem;\n\n// 8. Accordion Menu\n// -----------------\n\n$accordionmenu-padding: $global-menu-padding;\n$accordionmenu-nested-margin: $global-menu-nested-margin;\n$accordionmenu-submenu-padding: $accordionmenu-padding;\n$accordionmenu-arrows: true;\n$accordionmenu-arrow-color: get-color(primary);\n$accordionmenu-item-background: $dark-gray;\n$accordionmenu-border: 1px solid $white;\n$accordionmenu-submenu-toggle-background: $dark-gray;\n$accordion-submenu-toggle-border: null;\n$accordionmenu-submenu-toggle-width: 38px;\n$accordionmenu-submenu-toggle-height: $accordionmenu-submenu-toggle-width;\n$accordionmenu-arrow-size: 6px;\n\n// 9. Badge\n// --------\n\n$badge-background: $primary-color;\n$badge-color: $white;\n$badge-color-alt: $black;\n$badge-palette: $foundation-palette;\n$badge-padding: 0.3em;\n$badge-minwidth: 2.1em;\n$badge-font-size: 0.6rem;\n\n// 10. Breadcrumbs\n// ---------------\n\n$breadcrumbs-margin: 0 0 $global-margin 0;\n$breadcrumbs-item-font-size: rem-calc(11);\n$breadcrumbs-item-color: $primary-color;\n$breadcrumbs-item-color-current: $black;\n$breadcrumbs-item-color-disabled: $medium-gray;\n$breadcrumbs-item-margin: 0.75rem;\n$breadcrumbs-item-uppercase: true;\n$breadcrumbs-item-separator: true;\n$breadcrumbs-item-separator-item: '/';\n$breadcrumbs-item-separator-item-rtl: '\\\\';\n$breadcrumbs-item-separator-color: $medium-gray;\n\n// 11. Button\n// ----------\n\n$button-font-family: inherit;\n$button-padding: 0.85em 1em;\n$button-margin: 0 0 $global-margin 0;\n$button-fill: solid;\n$button-background: $primary-color;\n$button-background-hover: scale-color($button-background, $lightness: -15%);\n$button-color: $white;\n$button-color-alt: $black;\n$button-radius: $global-radius;\n$button-hollow-border-width: 1px;\n$button-sizes: (\n    tiny: 0.6rem,\n    small: 0.75rem,\n    default: 0.9rem,\n    large: 1.25rem,\n);\n$button-palette: $foundation-palette;\n$button-opacity-disabled: 0.25;\n$button-background-hover-lightness: -20%;\n$button-hollow-hover-lightness: -50%;\n$button-transition: background-color 0.25s ease-out, color 0.25s ease-out;\n\n// 12. Button Group\n// ----------------\n\n$buttongroup-margin: 1rem;\n$buttongroup-spacing: 1px;\n$buttongroup-child-selector: '.button';\n$buttongroup-expand-max: 6;\n$buttongroup-radius-on-each: true;\n\n// 13. Callout\n// -----------\n\n$callout-background: $white;\n$callout-background-fade: 85%;\n$callout-border: 1px solid rgba($black, 0.25);\n$callout-margin: 0 0 1rem 0;\n$callout-padding: 1rem;\n$callout-font-color: $body-font-color;\n$callout-font-color-alt: $body-background;\n$callout-radius: $global-radius;\n$callout-link-tint: 30%;\n\n// 14. Card\n// --------\n\n$card-background: $white;\n$card-font-color: $body-font-color;\n$card-divider-background: $light-gray;\n$card-border: 1px solid $light-gray;\n$card-shadow: none;\n$card-border-radius: $global-radius;\n$card-padding: $global-padding;\n$card-margin-bottom: $global-margin;\n\n// 15. Close Button\n// ----------------\n\n$closebutton-position: right top;\n$closebutton-offset-horizontal: (\n    small: 0.66rem,\n    medium: 1rem,\n);\n$closebutton-offset-vertical: (\n    small: 0.33em,\n    medium: 0.5rem,\n);\n$closebutton-size: (\n    small: 1.5em,\n    medium: 2em,\n);\n$closebutton-lineheight: 1;\n$closebutton-color: $dark-gray;\n$closebutton-color-hover: $black;\n\n// 16. Drilldown\n// -------------\n\n$drilldown-transition: transform 0.15s linear;\n$drilldown-arrows: true;\n$drilldown-padding: $global-menu-padding;\n$drilldown-nested-margin: 0;\n$drilldown-background: $white;\n$drilldown-submenu-padding: $drilldown-padding;\n$drilldown-submenu-background: $white;\n$drilldown-arrow-color: $primary-color;\n$drilldown-arrow-size: 6px;\n\n// 17. Dropdown\n// ------------\n\n$dropdown-padding: 1rem;\n$dropdown-background: $body-background;\n$dropdown-border: 1px solid $medium-gray;\n$dropdown-font-size: 1rem;\n$dropdown-width: 300px;\n$dropdown-radius: $global-radius;\n$dropdown-sizes: (\n    tiny: 100px,\n    small: 200px,\n    large: 400px,\n);\n\n// 18. Dropdown Menu\n// -----------------\n\n$dropdownmenu-arrows: true;\n$dropdownmenu-arrow-color: $anchor-color;\n$dropdownmenu-arrow-size: 6px;\n$dropdownmenu-arrow-padding: 1.5rem;\n$dropdownmenu-min-width: 200px;\n$dropdownmenu-background: $dark-gray;\n$dropdownmenu-submenu-background: $dropdownmenu-background;\n$dropdownmenu-padding: $global-menu-padding;\n$dropdownmenu-nested-margin: 0;\n$dropdownmenu-submenu-padding: $dropdownmenu-padding;\n$dropdownmenu-border: 1px solid $medium-gray;\n$dropdown-menu-item-color-active: get-color(primary);\n$dropdown-menu-item-background-active: transparent;\n\n// 19. Flexbox Utilities\n// ---------------------\n\n$flex-source-ordering-count: 6;\n$flexbox-responsive-breakpoints: true;\n\n// 20. Forms\n// ---------\n\n$fieldset-border: 1px solid $medium-gray;\n$fieldset-padding: rem-calc(20);\n$fieldset-margin: rem-calc(18 0);\n$legend-padding: rem-calc(0 3);\n$form-spacing: rem-calc(16);\n$helptext-color: $black;\n$helptext-font-size: rem-calc(13);\n$helptext-font-style: italic;\n$input-prefix-color: $black;\n$input-prefix-background: $light-gray;\n$input-prefix-border: 1px solid $medium-gray;\n$input-prefix-padding: 1rem;\n$form-label-color: $black;\n$form-label-font-size: rem-calc(14);\n$form-label-font-weight: $global-weight-normal;\n$form-label-line-height: 1.8;\n$select-background: $white;\n$select-triangle-color: $dark-gray;\n$select-radius: $global-radius;\n$input-color: $black;\n$input-placeholder-color: $medium-gray;\n$input-font-family: inherit;\n$input-font-size: rem-calc(16);\n$input-font-weight: $global-weight-normal;\n$input-line-height: $global-lineheight;\n$input-background: $white;\n$input-background-focus: $white;\n$input-background-disabled: $light-gray;\n$input-border: 1px solid $medium-gray;\n$input-border-focus: 1px solid $dark-gray;\n$input-padding: $form-spacing / 2;\n$input-shadow: inset 0 1px 2px rgba($black, 0.1);\n$input-shadow-focus: 0 0 5px $medium-gray;\n$input-cursor-disabled: not-allowed;\n$input-transition: box-shadow 0.5s, border-color 0.25s ease-in-out;\n$input-number-spinners: true;\n$input-radius: $global-radius;\n$form-button-radius: $global-radius;\n\n// 21. Label\n// ---------\n\n$label-background: $primary-color;\n$label-color: $white;\n$label-color-alt: $black;\n$label-palette: $foundation-palette;\n$label-font-size: 0.8rem;\n$label-padding: 0.33333rem 0.5rem;\n$label-radius: $global-radius;\n\n// 22. Media Object\n// ----------------\n\n$mediaobject-margin-bottom: $global-margin;\n$mediaobject-section-padding: $global-padding;\n$mediaobject-image-width-stacked: 100%;\n\n// 23. Menu\n// --------\n\n$menu-margin: 0;\n$menu-nested-margin: $global-menu-nested-margin;\n$menu-items-padding: $global-menu-padding;\n$menu-simple-margin: 1rem;\n$menu-item-color-active: $dark-gray;\n$menu-item-background-active: get-color(primary);\n$menu-icon-spacing: 0.25rem;\n$menu-item-background-hover: $light-gray;\n$menu-state-back-compat: true;\n$menu-centered-back-compat: true;\n$menu-icons-back-compat: true;\n\n// 24. Meter\n// ---------\n\n$meter-height: 1rem;\n$meter-radius: $global-radius;\n$meter-background: $medium-gray;\n$meter-fill-good: $success-color;\n$meter-fill-medium: $warning-color;\n$meter-fill-bad: $alert-color;\n\n// 25. Off-canvas\n// --------------\n\n$offcanvas-sizes: (\n    small: 250px,\n);\n$offcanvas-vertical-sizes: (\n    small: 250px,\n);\n$offcanvas-background: $light-gray;\n$offcanvas-shadow: 0 0 10px rgba($black, 0.7);\n$offcanvas-inner-shadow-size: 20px;\n$offcanvas-inner-shadow-color: rgba($black, 0.25);\n$offcanvas-overlay-zindex: 11;\n$offcanvas-push-zindex: 12;\n$offcanvas-overlap-zindex: 13;\n$offcanvas-reveal-zindex: 12;\n$offcanvas-transition-length: 0.5s;\n$offcanvas-transition-timing: ease;\n$offcanvas-fixed-reveal: true;\n$offcanvas-exit-background: rgba($white, 0.25);\n$maincontent-class: 'off-canvas-content';\n\n// 26. Orbit\n// ---------\n\n$orbit-bullet-background: $medium-gray;\n$orbit-bullet-background-active: $dark-gray;\n$orbit-bullet-diameter: 1.2rem;\n$orbit-bullet-margin: 0.1rem;\n$orbit-bullet-margin-top: 0.8rem;\n$orbit-bullet-margin-bottom: 0.8rem;\n$orbit-caption-background: rgba($black, 0.5);\n$orbit-caption-padding: 1rem;\n$orbit-control-background-hover: rgba($black, 0.5);\n$orbit-control-padding: 1rem;\n$orbit-control-zindex: 10;\n\n// 27. Pagination\n// --------------\n\n$pagination-font-size: rem-calc(14);\n$pagination-margin-bottom: $global-margin;\n$pagination-item-color: $black;\n$pagination-item-padding: rem-calc(3 10);\n$pagination-item-spacing: rem-calc(1);\n$pagination-radius: $global-radius;\n$pagination-item-background-hover: $light-gray;\n$pagination-item-background-current: $primary-color;\n$pagination-item-color-current: $white;\n$pagination-item-color-disabled: $medium-gray;\n$pagination-ellipsis-color: $black;\n$pagination-mobile-items: false;\n$pagination-mobile-current-item: false;\n$pagination-arrows: true;\n\n// 28. Progress Bar\n// ----------------\n\n$progress-height: 1rem;\n$progress-background: $medium-gray;\n$progress-margin-bottom: $global-margin;\n$progress-meter-background: $primary-color;\n$progress-radius: $global-radius;\n\n// 29. Prototype Arrow\n// -------------------\n\n$prototype-arrow-directions: (\n    down,\n    up,\n    right,\n    left\n);\n$prototype-arrow-size: 0.4375rem;\n$prototype-arrow-color: $black;\n\n// 30. Prototype Border-Box\n// ------------------------\n\n$prototype-border-box-breakpoints: $global-prototype-breakpoints;\n\n// 31. Prototype Border-None\n// -------------------------\n\n$prototype-border-none-breakpoints: $global-prototype-breakpoints;\n\n// 32. Prototype Bordered\n// ----------------------\n\n$prototype-bordered-breakpoints: $global-prototype-breakpoints;\n$prototype-border-width: rem-calc(1);\n$prototype-border-type: solid;\n$prototype-border-color: $medium-gray;\n\n// 33. Prototype Display\n// ---------------------\n\n$prototype-display-breakpoints: $global-prototype-breakpoints;\n$prototype-display: (\n    inline,\n    inline-block,\n    block,\n    table,\n    table-cell\n);\n\n// 34. Prototype Font-Styling\n// --------------------------\n\n$prototype-font-breakpoints: $global-prototype-breakpoints;\n$prototype-wide-letter-spacing: rem-calc(4);\n$prototype-font-normal: $global-weight-normal;\n$prototype-font-bold: $global-weight-bold;\n\n// 35. Prototype List-Style-Type\n// -----------------------------\n\n$prototype-list-breakpoints: $global-prototype-breakpoints;\n$prototype-style-type-unordered: (\n    disc,\n    circle,\n    square\n);\n$prototype-style-type-ordered: (\n    decimal,\n    lower-alpha,\n    lower-latin,\n    lower-roman,\n    upper-alpha,\n    upper-latin,\n    upper-roman\n);\n\n// 36. Prototype Overflow\n// ----------------------\n\n$prototype-overflow-breakpoints: $global-prototype-breakpoints;\n$prototype-overflow: (\n    visible,\n    hidden,\n    scroll\n);\n\n// 37. Prototype Position\n// ----------------------\n\n$prototype-position-breakpoints: $global-prototype-breakpoints;\n$prototype-position: (\n    static,\n    relative,\n    absolute,\n    fixed\n);\n$prototype-position-z-index: 975;\n\n// 38. Prototype Rounded\n// ---------------------\n\n$prototype-rounded-breakpoints: $global-prototype-breakpoints;\n$prototype-border-radius: rem-calc(3);\n\n// 39. Prototype Separator\n// -----------------------\n\n$prototype-separator-breakpoints: $global-prototype-breakpoints;\n$prototype-separator-align: center;\n$prototype-separator-height: rem-calc(2);\n$prototype-separator-width: 3rem;\n$prototype-separator-background: $primary-color;\n$prototype-separator-margin-top: $global-margin;\n\n// 40. Prototype Shadow\n// --------------------\n\n$prototype-shadow-breakpoints: $global-prototype-breakpoints;\n$prototype-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16),\n0 2px 10px 0 rgba(0, 0, 0, 0.12);\n\n// 41. Prototype Sizing\n// --------------------\n\n$prototype-sizing-breakpoints: $global-prototype-breakpoints;\n$prototype-sizing: (\n    width,\n    height\n);\n$prototype-sizes: (\n    25: 25%,\n    50: 50%,\n    75: 75%,\n    100: 100%\n);\n\n// 42. Prototype Spacing\n// ---------------------\n\n$prototype-spacing-breakpoints: $global-prototype-breakpoints;\n$prototype-spacers-count: 3;\n\n// 43. Prototype Text-Decoration\n// -----------------------------\n\n$prototype-decoration-breakpoints: $global-prototype-breakpoints;\n$prototype-text-decoration: (\n    overline,\n    underline,\n    line-through,\n);\n\n// 44. Prototype Text-Transformation\n// ---------------------------------\n\n$prototype-transformation-breakpoints: $global-prototype-breakpoints;\n$prototype-text-transformation: (\n    lowercase,\n    uppercase,\n    capitalize\n);\n\n// 45. Prototype Text-Utilities\n// ----------------------------\n\n$prototype-utilities-breakpoints: $global-prototype-breakpoints;\n$prototype-text-overflow: ellipsis;\n\n// 46. Responsive Embed\n// --------------------\n\n$responsive-embed-margin-bottom: rem-calc(16);\n$responsive-embed-ratios: (\n    default: 4 by 3,\n    widescreen: 16 by 9,\n);\n\n// 47. Reveal\n// ----------\n\n$reveal-background: $white;\n$reveal-width: 600px;\n$reveal-max-width: $global-width;\n$reveal-padding: $global-padding;\n$reveal-border: 1px solid $medium-gray;\n$reveal-radius: $global-radius;\n$reveal-zindex: 1005;\n$reveal-overlay-background: rgba($black, 0.45);\n\n// 48. Slider\n// ----------\n\n$slider-width-vertical: 0.5rem;\n$slider-transition: all 0.2s ease-in-out;\n$slider-height: 0.5rem;\n$slider-background: $light-gray;\n$slider-fill-background: $medium-gray;\n$slider-handle-height: 1.4rem;\n$slider-handle-width: 1.4rem;\n$slider-handle-background: $primary-color;\n$slider-opacity-disabled: 0.25;\n$slider-radius: $global-radius;\n\n// 49. Switch\n// ----------\n\n$switch-background: $medium-gray;\n$switch-background-active: $primary-color;\n$switch-height: 2rem;\n$switch-height-tiny: 1.5rem;\n$switch-height-small: 1.75rem;\n$switch-height-large: 2.5rem;\n$switch-radius: $global-radius;\n$switch-margin: $global-margin;\n$switch-paddle-background: $white;\n$switch-paddle-offset: 0.25rem;\n$switch-paddle-radius: $global-radius;\n$switch-paddle-transition: all 0.25s ease-out;\n\n// 50. Table\n// ---------\n\n$table-background: $white;\n$table-color-scale: 5%;\n$table-border: 1px solid smart-scale($table-background, $table-color-scale);\n$table-padding: rem-calc(8 10 10);\n$table-hover-scale: 2%;\n$table-row-hover: darken($table-background, $table-hover-scale);\n$table-row-stripe-hover: darken($table-background, $table-color-scale + $table-hover-scale);\n$table-is-striped: true;\n$table-striped-background: smart-scale($table-background, $table-color-scale);\n$table-stripe: even;\n$table-head-background: smart-scale($table-background, $table-color-scale / 2);\n$table-head-row-hover: darken($table-head-background, $table-hover-scale);\n$table-foot-background: smart-scale($table-background, $table-color-scale);\n$table-foot-row-hover: darken($table-foot-background, $table-hover-scale);\n$table-head-font-color: $body-font-color;\n$table-foot-font-color: $body-font-color;\n$show-header-for-stacked: false;\n$table-stack-breakpoint: medium;\n\n// 51. Tabs\n// --------\n\n$tab-margin: 0;\n$tab-background: $white;\n$tab-color: $primary-color;\n$tab-background-active: $light-gray;\n$tab-active-color: $primary-color;\n$tab-item-font-size: rem-calc(12);\n$tab-item-background-hover: $white;\n$tab-item-padding: 1.25rem 1.5rem;\n$tab-expand-max: 6;\n$tab-content-background: $white;\n$tab-content-border: $light-gray;\n$tab-content-color: $body-font-color;\n$tab-content-padding: 1rem;\n\n// 52. Thumbnail\n// -------------\n\n$thumbnail-border: solid 4px $white;\n$thumbnail-margin-bottom: $global-margin;\n$thumbnail-shadow: 0 0 0 1px rgba($black, 0.2);\n$thumbnail-shadow-hover: 0 0 6px 1px rgba($primary-color, 0.5);\n$thumbnail-transition: box-shadow 200ms ease-out;\n$thumbnail-radius: $global-radius;\n\n// 53. Title Bar\n// -------------\n\n$titlebar-background: $black;\n$titlebar-color: $white;\n$titlebar-padding: $global-menu-padding;\n$titlebar-text-font-weight: bold;\n$titlebar-icon-color: $white;\n$titlebar-icon-color-hover: $medium-gray;\n$titlebar-icon-spacing: 0.25rem;\n\n// 54. Tooltip\n// -----------\n\n$has-tip-cursor: help;\n$has-tip-font-weight: $global-weight-bold;\n$has-tip-border-bottom: dotted 1px $dark-gray;\n$tooltip-background-color: $black;\n$tooltip-color: $white;\n$tooltip-padding: 0.75rem;\n$tooltip-max-width: 10rem;\n$tooltip-font-size: $small-font-size;\n$tooltip-pip-width: 0.75rem;\n$tooltip-pip-height: $tooltip-pip-width * 0.866;\n$tooltip-radius: $global-radius;\n\n// 55. Top Bar\n// -----------\n\n$topbar-padding: 0;\n$topbar-background: $white;\n$topbar-submenu-background: $topbar-background;\n$topbar-title-spacing: 0.45rem;\n$topbar-input-width: 200px;\n$topbar-unstack-breakpoint: medium;\n\n// 56. Xy Grid\n// -----------\n\n$xy-grid: true;\n$grid-container: $global-width;\n$grid-columns: 12;\n$grid-margin-gutters: (\n    small: 20px,\n    medium: 30px\n);\n$grid-padding-gutters: $grid-margin-gutters;\n$grid-container-padding: $grid-padding-gutters;\n$grid-container-max: $global-width;\n$xy-block-grid-max: 8;\n\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // First, lets convert our $base to pixels\n\n  // If the base font size is a %, then multiply it by 16px\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if unit($base) == 'em' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  // Now lets convert our value to pixels too\n  @if unit($value) == '%' {\n    $value: ($value / 100%) * $base;\n  }\n\n  @if unit($value) == 'rem' {\n    $value: strip-unit($value) * $base;\n  }\n\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * $base;\n  }\n\n  // 'px'\n  @if unit($value) == 'px' {\n    @return strip-unit($value) / strip-unit($base);\n  }\n\n  // assume that line-heights greatern then 10 are meant to be absolute in 'px'\n  @if unitless($value) and ($value > 10) {\n    @return $value / strip-unit($base);\n  }\n\n  @return $value;\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'Your smallest breakpoint (defined in $breakpoints) must be set to \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - (1/16);\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  @if $old-zf-size != null {\n    // Restore the old breakpoint size\n    $-zf-size: $old-zf-size !global;\n  } @else {\n    $-zf-size: null !global;\n  }\n}\n\n/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoing - a named or non-named breakpoing.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group typography-helpers\n////\n\n/// Default font size for lead paragraphs.\n/// @type Number\n$lead-font-size: $global-font-size * 1.25 !default;\n\n/// Default line height for lead paragraphs.\n/// @type String\n$lead-lineheight: 1.6 !default;\n\n/// Default line height for subheaders.\n/// @type Number\n$subheader-lineheight: 1.4 !default;\n\n/// Default font color for subheaders.\n/// @type Color\n$subheader-color: $dark-gray !default;\n\n/// Default font weight for subheaders.\n/// @type String\n$subheader-font-weight: $global-weight-normal !default;\n\n/// Default top margin for subhheaders.\n/// @type Number\n$subheader-margin-top: 0.2rem !default;\n\n/// Default bottom margin for subheaders.\n/// @type Number\n$subheader-margin-bottom: 0.5rem !default;\n\n/// Default font size for statistic numbers.\n/// @type Number\n$stat-font-size: 2.5rem !default;\n\n@mixin foundation-typography-helpers {\n  // Use to create a subheading under a main header\n  // Make sure you pair the two elements in a <header> element, like this:\n  // <header>\n  //   <h1>Heading</h1>\n  //   <h2>Subheading</h2>\n  // </header>\n  .subheader {\n    margin-top: $subheader-margin-top;\n    margin-bottom: $subheader-margin-bottom;\n\n    font-weight: $subheader-font-weight;\n    line-height: $subheader-lineheight;\n    color: $subheader-color;\n  }\n\n  // Use to style an introductory lead, deck, blurb, etc.\n  .lead {\n    font-size: $lead-font-size;\n    line-height: $lead-lineheight;\n  }\n\n  // Use to style a large number to display a statistic\n  .stat {\n    font-size: $stat-font-size;\n    line-height: 1;\n\n    p + & {\n      margin-top: -1rem;\n    }\n  }\n\n  ul, ol {\n    // Use to remove numbers from ordered list & bullets from unordered list\n    &.no-bullet {\n      margin-#{$global-left}: 0;\n      list-style: none;\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n@mixin foundation-text-alignment {\n  @each $size in $breakpoint-classes {\n    @include breakpoint($size) {\n      @each $align in (left, right, center, justify) {\n        @if $size != $-zf-zero-breakpoint {\n          .#{$size}-text-#{$align} {\n            text-align: $align;\n          }\n        }\n        @else {\n          .text-#{$align} {\n            text-align: $align;\n          }\n        }\n      }\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n/// If `true`, all elements will have transparent backgrounds when printed, to save on ink.\n/// @type Boolean\n/// @group global\n$print-transparent-backgrounds: true !default;\n$print-hrefs: true !default;\n\n// sass-lint:disable-all\n\n@mixin foundation-print-styles {\n  .show-for-print { display: none !important; }\n\n  @media print {\n    * {\n      @if $print-transparent-backgrounds {\n        background: transparent !important;\n      }\n\n      box-shadow: none !important;\n\n      color: black !important; // Black prints faster: h5bp.com/s\n      text-shadow: none !important;\n    }\n\n    .show-for-print { display: block !important; }\n    .hide-for-print { display: none !important; }\n\n    table.show-for-print { display: table !important; }\n    thead.show-for-print { display: table-header-group !important; }\n    tbody.show-for-print { display: table-row-group !important; }\n    tr.show-for-print { display: table-row !important; }\n    td.show-for-print { display: table-cell !important; }\n    th.show-for-print { display: table-cell !important; }\n\n    // Display the URL of a link after the text\n    a,\n    a:visited { text-decoration: underline;}\n    @if $print-hrefs {\n      a[href]:after { content: ' (' attr(href) ')'; }\n    }\n\n    // Don't display the URL for images or JavaScript/internal links\n    .ir a:after,\n    a[href^='javascript:']:after,\n    a[href^='#']:after { content: ''; }\n\n    // Display what an abbreviation stands for after the text\n    abbr[title]:after { content: ' (' attr(title) ')'; }\n\n    // Prevent page breaks in the middle of a blockquote or preformatted text block\n    pre,\n    blockquote {\n      border: 1px solid $dark-gray;\n      page-break-inside: avoid;\n    }\n\n    // h5bp.com/t\n    thead { display: table-header-group; }\n\n    tr,\n    img { page-break-inside: avoid; }\n\n    img { max-width: 100% !important; }\n\n    @page { margin: 0.5cm; }\n\n    p,\n    h2,\n    h3 {\n      orphans: 3;\n      widows: 3;\n    }\n\n    // Avoid page breaks after a heading\n    h2,\n    h3 { page-break-after: avoid; }\n\n    // Helper to re-allow page breaks in the middle of certain elements (e.g. pre, blockquote, tr)\n    .print-break-inside {\n      page-break-inside: auto;\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n// sass-lint:disable force-element-nesting, no-qualifying-elements\n\n////\n/// @group table\n////\n\n/// Default color for table background.\n/// @type Color\n$table-background: $white  !default;\n\n/// Default scale for darkening the striped table rows and the table border.\n/// @type Number\n$table-color-scale: 5% !default;\n\n/// Default style for table border.\n/// @type List\n$table-border: 1px solid smart-scale($table-background, $table-color-scale) !default;\n\n/// Default padding for table.\n/// @type Number\n$table-padding: rem-calc(8 10 10) !default;\n\n/// Default scale for darkening the table rows on hover.\n/// @type Number\n$table-hover-scale: 2% !default;\n\n/// Default color of standard rows on hover.\n/// @type List\n$table-row-hover: darken($table-background, $table-hover-scale) !default;\n\n/// Default color of striped rows on hover.\n/// @type List\n$table-row-stripe-hover: darken($table-background, $table-color-scale + $table-hover-scale) !default;\n\n/// If `true`, tables are striped by default and an .unstriped class is created. If `false`, a .striped class is created.\n/// @type Boolean\n$table-is-striped: true !default;\n\n/// Default background color for striped rows.\n/// @type Color\n$table-striped-background: smart-scale($table-background, $table-color-scale) !default;\n\n/// Default value for showing the stripe on rows of the tables, excluding the header and footer. If even, the even rows will have a background color. If odd, the odd rows will have a background color. If empty, or any other value, the table rows will have no striping.\n/// @type Keyword\n$table-stripe: even !default;\n\n/// Default color for header background.\n/// @type Color\n$table-head-background: smart-scale($table-background, $table-color-scale / 2) !default;\n\n/// Default color of header rows on hover.\n/// @type List\n$table-head-row-hover: darken($table-head-background, $table-hover-scale) !default;\n\n/// Default color for footer background.\n/// @type Color\n$table-foot-background: smart-scale($table-background, $table-color-scale) !default;\n\n/// Default color of footer rows on hover.\n/// @type List\n$table-foot-row-hover: darken($table-foot-background, $table-hover-scale) !default;\n\n/// Default font color for header.\n/// @type Color\n$table-head-font-color: $body-font-color !default;\n\n/// Default font color for footer.\n/// @type Color\n$table-foot-font-color: $body-font-color !default;\n\n/// Default value for showing the header when using stacked tables.\n/// @type Boolean\n$show-header-for-stacked: false !default;\n\n/// Breakpoint at which stacked table switches from mobile to desktop view.\n/// @type Breakpoint\n$table-stack-breakpoint: medium !default;\n\n@mixin -zf-table-stripe($stripe: $table-stripe) {\n  tr {\n    // If stripe is set to even, darken the even rows.\n    @if $stripe == even {\n      &:nth-child(even) {\n        border-bottom: 0;\n        background-color: $table-striped-background;\n      }\n    }\n\n    // If stripe is set to odd, darken the odd rows.\n    @else if $stripe == odd {\n      &:nth-child(odd) {\n        background-color: $table-striped-background;\n      }\n    }\n  }\n}\n\n@mixin -zf-table-unstripe() {\n  tr {\n    border-bottom: 0;\n    border-bottom: $table-border;\n    background-color: $table-background;\n  }\n}\n\n@mixin -zf-table-children-styles($stripe: $table-stripe, $is-striped: $table-is-striped) {\n  thead,\n  tbody,\n  tfoot {\n    border: $table-border;\n    background-color: $table-background;\n  }\n\n  // Caption\n  caption {\n    padding: $table-padding;\n    font-weight: $global-weight-bold;\n  }\n\n  // Table head\n  thead {\n    background: $table-head-background;\n    color: $table-head-font-color;\n  }\n\n  // Table foot\n  tfoot {\n    background: $table-foot-background;\n    color: $table-foot-font-color;\n  }\n\n  // Table head and foot\n  thead,\n  tfoot {\n    // Rows within head and foot\n    tr {\n      background: transparent;\n    }\n\n    // Cells within head and foot\n    th,\n    td {\n      padding: $table-padding;\n      font-weight: $global-weight-bold;\n      text-align: #{$global-left};\n    }\n  }\n\n  // Table rows\n  tbody {\n    th,\n    td {\n      padding: $table-padding;\n    }\n  }\n\n  // If tables are striped\n  @if $is-striped == true {\n    tbody {\n      @include -zf-table-stripe($stripe);\n    }\n\n    &.unstriped {\n      tbody {\n        @include -zf-table-unstripe();\n        background-color: $table-background;\n      }\n    }\n  }\n\n  // If tables are not striped\n  @else if $is-striped == false {\n    tbody {\n      @include -zf-table-unstripe();\n    }\n\n    &.striped {\n      tbody {\n        @include -zf-table-stripe($stripe);\n      }\n    }\n  }\n}\n\n/// Adds the general styles for tables.\n/// @param {Keyword} $stripe [$table-stripe] - Uses keywords even, odd, or none to darken rows of the table. The default value is even.\n@mixin table(\n  $stripe: $table-stripe,\n  $nest: false\n) {\n  border-collapse: collapse;\n  width: 100%;\n  margin-bottom: $global-margin;\n  border-radius: $global-radius;\n\n  @if $nest {\n    @include -zf-table-children-styles($stripe);\n  }\n  @else {\n    @at-root {\n      @include -zf-table-children-styles($stripe);\n    }\n  }\n}\n\n/// Adds the ability to horizontally scroll the table when the content overflows horizontally.\n@mixin table-scroll {\n  display: block;\n  width: 100%;\n  overflow-x: auto;\n}\n\n/// Slightly darkens the table rows on hover.\n@mixin table-hover {\n  thead tr {\n    //Darkens the table header rows on hover.\n    &:hover {\n      background-color: $table-head-row-hover;\n    }\n  }\n\n  tfoot tr {\n    //Darkens the table footer rows on hover.\n    &:hover {\n      background-color: $table-foot-row-hover;\n    }\n  }\n\n  tbody tr {\n    //Darkens the non-striped table rows on hover.\n    &:hover {\n      background-color: $table-row-hover;\n    }\n  }\n\n  @if $table-is-striped == true {\n    // Darkens the even striped table rows.\n    @if($table-stripe == even) {\n      &:not(.unstriped) tr:nth-of-type(even):hover {\n        background-color: $table-row-stripe-hover;\n      }\n    }\n\n    // Darkens the odd striped table rows.\n    @elseif($table-stripe == odd) {\n      &:not(.unstriped) tr:nth-of-type(odd):hover {\n        background-color: $table-row-stripe-hover;\n      }\n    }\n  }\n\n  @else if $table-is-striped == false {\n    // Darkens the even striped table rows.\n    @if($table-stripe == even) {\n      &.striped tr:nth-of-type(even):hover {\n        background-color: $table-row-stripe-hover;\n      }\n    }\n\n    // Darkens the odd striped table rows.\n    @elseif($table-stripe == odd) {\n      &.striped tr:nth-of-type(odd):hover {\n        background-color: $table-row-stripe-hover;\n      }\n    }\n  }\n}\n\n/// Adds styles for a stacked table. Useful for small-screen layouts.\n/// @param {Boolean} $header [$show-header-for-stacked] - Show the first th of header when stacked.\n@mixin table-stack($header: $show-header-for-stacked) {\n  @if $header {\n    thead {\n      th {\n        display: block;\n      }\n    }\n  }\n  @else {\n    thead {\n      display: none;\n    }\n  }\n\n  tfoot {\n    display: none;\n  }\n\n  tr,\n  th,\n  td {\n    display: block;\n  }\n\n  td {\n    border-top: 0;\n  }\n}\n\n@mixin foundation-table($nest: false) {\n  table {\n    @include table($nest: $nest);\n  }\n\n  table.stack {\n    @include breakpoint($table-stack-breakpoint down) {\n      @include table-stack;\n    }\n  }\n\n  table.scroll {\n    @include table-scroll;\n  }\n\n  table.hover {\n    @include table-hover;\n  }\n\n  .table-scroll {\n    overflow-x: auto;\n\n    table {\n      width: auto;\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n@import 'math';\n\n$contrast-warnings: true !default;\n\n////\n/// @group functions\n////\n\n/// Checks the luminance of `$color`.\n///\n/// @param {Color} $color - Color to check the luminance of.\n///\n/// @returns {Number} The luminance of `$color`.\n@function color-luminance($color) {\n  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js\n  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  $rgba: red($color), green($color), blue($color);\n  $rgba2: ();\n\n  @for $i from 1 through 3 {\n    $rgb: nth($rgba, $i);\n    $rgb: $rgb / 255;\n\n    $rgb: if($rgb < 0.03928, $rgb / 12.92, pow(($rgb + 0.055) / 1.055, 2.4));\n\n    $rgba2: append($rgba2, $rgb);\n  }\n\n  @return 0.2126 * nth($rgba2, 1) + 0.7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);\n}\n\n/// Checks the contrast ratio of two colors.\n///\n/// @param {Color} $color1 - First color to compare.\n/// @param {Color} $color2 - Second color to compare.\n///\n/// @returns {Number} The contrast ratio of the compared colors.\n@function color-contrast($color1, $color2) {\n  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js\n  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n  $luminance1: color-luminance($color1) + 0.05;\n  $luminance2: color-luminance($color2) + 0.05;\n  $ratio: $luminance1 / $luminance2;\n\n  @if $luminance2 > $luminance1 {\n    $ratio: 1 / $ratio;\n  }\n\n  $ratio: round($ratio * 10) / 10;\n\n  @return $ratio;\n}\n\n/// Checks the luminance of `$base`, and returns the color from `$colors` (list of colors) that has the most contrast.\n///\n/// @param {Color} $base - Color to check luminance.\n/// @param {List} $colors [($white, $black)] - Colors to compare.\n/// @param {Number} $tolerance [$global-color-pick-contrast-tolerance] - Contrast tolerance.\n///\n/// @returns {Color} the color from `$colors` (list of colors) that has the most contrast.\n@function color-pick-contrast($base, $colors: ($white, $black), $tolerance: $global-color-pick-contrast-tolerance) {\n  $contrast: color-contrast($base, nth($colors, 1));\n  $best: nth($colors, 1);\n\n  @for $i from 2 through length($colors) {\n    $current-contrast: color-contrast($base, nth($colors, $i));\n    @if ($current-contrast - $contrast > $tolerance) {\n      $contrast: color-contrast($base, nth($colors, $i));\n      $best: nth($colors, $i);\n    }\n  }\n\n  @if ($contrast-warnings and $contrast < 3) {\n    @warn \"Contrast ratio of #{$best} on #{$base} is pretty bad, just #{$contrast}\";\n  }\n\n  @return $best;\n}\n\n/// Scales a color to be darker if it's light, or lighter if it's dark. Use this function to tint a color appropriate to its lightness.\n///\n/// @param {Color} $color - Color to scale.\n/// @param {Percentage} $scale [5%] - Amount to scale up or down.\n/// @param {Percentage} $threshold [40%] - Threshold of lightness to check against.\n///\n/// @returns {Color} A scaled color.\n@function smart-scale($color, $scale: 5%, $threshold: 40%) {\n  @if lightness($color) > $threshold {\n    $scale: -$scale;\n  }\n  @return scale-color($color, $lightness: $scale);\n}\n\n/// Get color from foundation-palette\n///\n/// @param {key} color key from foundation-palette\n///\n/// @returns {Color} color from foundation-palette\n@function get-color($key) {\n  @if map-has-key($foundation-palette, $key) {\n    @return map-get($foundation-palette, $key);\n  }\n  @else {\n    @error 'given $key is not available in $foundation-palette';\n  }\n}\n\n/// Transfers the colors in the `$foundation-palette`map into variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase.\n@mixin add-foundation-colors() {\n  @if map-has-key($foundation-palette, primary) {\n    $primary-color: map-get($foundation-palette, primary) !global;\n  }\n  @if map-has-key($foundation-palette, secondary) {\n    $secondary-color: map-get($foundation-palette, secondary) !global;\n  }\n  @if map-has-key($foundation-palette, success) {\n    $success-color: map-get($foundation-palette, success) !global;\n  }\n  @if map-has-key($foundation-palette, warning) {\n    $warning-color: map-get($foundation-palette, warning) !global;\n  }\n  @if map-has-key($foundation-palette, alert) {\n    $alert-color: map-get($foundation-palette, alert) !global;\n  }\n}\n","//RTE\n.cke_editable {\n  font-size: $global-font-size;\n  font-family: $body-font-family;\n}\n\n//.htmlarea-content-body {\n//  background-color: #f90;\n//  font-size: $global-font-size;\n//  font-family: $body-font-family;\n//  p {\n//    border: 1px solid $light-gray;\n//    position: relative;\n//    &:before {\n//      content: \"p\";\n//      position: absolute;\n//      left: 0;\n//      top: 0;\n//      z-index: -1;\n//      color: $light-gray;\n//      font-size: 85%;\n//    }\n//    p[value=\" \"] {\n//      background-color: orange;\n//    }\n//  }\n//}\n\n/* Left, center, right and justify alignment of text in block elements*/\np, td, th,\nh1, h2, h3, h4, h5, h6,\ndiv, address {\n  &.align-left {\n    text-align: left;\n  }\n  &.align-center {\n    text-align: center;\n  }\n  &.align-right {\n    text-align: right;\n  }\n  &.align-justify {\n    text-align: justify;\n  }\n}\n\nspan {\n  &.c-important {\n    color: #f90;\n  }\n  &.c-tiny {\n    color: #999999;\n    font-size: 75%;\n  }\n}\n\np {\n  &.p-tiny {\n    color: #999999;\n    font-size: 75%;\n  }\n}\n\n/* Bullet styles for unordered lists.*/\nul.component-items {\n  color: #186900;\n  list-style-type: circle;\n}\n\nul.ul-style1 {\n  color: #8A0020;\n  //list-style-image: url(../../Images/red_arrow_bullet.png);\n}\n\n/* Numbering styles for ordered lists.*/\nol.ul-style2 {\n  color: #10007B;\n  list-style-type: lower-roman;\n}\n\n//ol.action-items-ordered {\n//  color: #8A0020;\n//  list-style-type: lower-greek;\n//}\n\n/* Selectors for the default configuration of the link accessibity feature.*/\na.external-link {\n}\n\na.external-link-new-window {\n}\n\na.internal-link {\n}\n\na.internal-link-new-window {\n}\n\na.download {\n}\n\na.mail {\n}\n\n/* Default selector for indentation.*/\ndiv.indent {\n  margin-left: 2em;\n}\n"]}
=======
{"version":3,"sources":["Rte.css","../../../Build/bower_components/foundation-sites/scss/foundation.scss","Base/_font-import.scss","../../../Build/bower_components/foundation-sites/scss/typography/_base.scss","_settings.scss","../../../Build/bower_components/foundation-sites/scss/util/_unit.scss","../../../Build/bower_components/foundation-sites/scss/util/_breakpoint.scss","../../../Build/bower_components/foundation-sites/scss/typography/_helpers.scss","../../../Build/bower_components/foundation-sites/scss/typography/_alignment.scss","../../../Build/bower_components/foundation-sites/scss/typography/_print.scss","../../../Build/bower_components/foundation-sites/scss/components/_table.scss","../../../Build/bower_components/foundation-sites/scss/util/_color.scss","Base/_typography.scss"],"names":[],"mappings":"AAAA,iBAAiB;ACAjB;;;;;GAKG;ACwBD;EACE,oBAQqB;EAPrB,mBAOyE;EANzE,iBAMiE;EALjE,6LAP2E,EAAA;;AAG7E;EACE,oBASqB;EARrB,mBAQwE;EAPxE,iBAOgE;EANhE,0LAP2E,EAAA;;AAG7E;EACE,oBAUqB;EATrB,mBASsE;EARtE,iBAQ8D;EAP9D,oLAP2E,EAAA;;AAG7E;EACE,oBAWqB;EAVrB,mBAU4E;EAT5E,iBASoE;EARpE,sMAP2E,EAAA;;ACqO7E;;;;;;;;;;;;;;;;;;;EAmBE,UAAS;EACT,WAAU,EACX;;AAGD;EACE,oBChG0B;EDkG1B,mBAAkB;EAClB,iBCpGsB;EDqGtB,mCCnGyC,EDoG1C;;AAGD;;EAEE,mBAAkB;EAClB,qBAAoB,EACrB;;AAGD;;EAEE,kBCxLqB;EDyLrB,qBAAoB,EACrB;;AAGD;EACE,eC1HiB;ED2HjB,qBAAoB,EACrB;;AAGD;;;;;;EAME,wDC/MyD;EDgNzD,mBC9JsB;ED+JtB,oBC5MyB;ED6MzB,eC9JkB;ED+JlB,mCC1IsC,EDgJvC;EAhBD;;;;;;IAaI,eAAc;IACd,eC7Ne,ED8NhB;;AAQG;EAII,kBEvP6C;EFmQ7C,iBC3LW;EDmMX,cAAa;EAOb,sBCzMiB,ED2MpB;;AAjCD;EAII,mBEvP6C;EFmQ7C,iBC3LW;EDmMX,cAAa;EAOb,sBCzMiB,ED2MpB;;AAjCD;EAII,qBEvP6C;EFmQ7C,iBC3LW;EDmMX,cAAa;EAOb,sBCzMiB,ED2MpB;;AAjCD;EAII,oBEvP6C;EFmQ7C,iBC3LW;EDmMX,cAAa;EAOb,sBCzMiB,ED2MpB;;AAjCD;EAII,qBEvP6C;EFmQ7C,iBC3LW;EDmMX,cAAa;EAOb,sBCzMiB,ED2MpB;;AAjCD;EAII,gBEvP6C;EFmQ7C,iBC3LW;EDmMX,cAAa;EAOb,sBCzMiB,ED2MpB;;AGzMH;EHwKE;IAII,gBEvP6C,EFoRhD;EAjCD;IAII,kBEvP6C,EFoRhD;EAjCD;IAII,qBEvP6C,EFoRhD;EAjCD;IAII,qBEvP6C,EFoRhD;EAjCD;IAII,mBEvP6C,EFoRhD;EAjCD;IAII,gBEvP6C,EFoRhD,EAAA;;AAMP;EACE,qBAAoB;EACpB,eCzRgB;ED0RhB,sBCnLyB;EDqLzB,gBAAe,EAahB;EAlBD;IASI,eC1L2D,ED8L5D;EAbH;IAgBI,UAAS,EACV;;AAIH;EACE,YAAW;EAEX,iBElTqD;EFmTrD,UAAS;EACT,qBCtMyB;EDwMzB,cAAa;EACb,gBAAe;EACf,iCC3SiB;ED4SjB,eAAc,EACf;;AAGD;;;EAGE,oBChO0B;EDiO1B,6BC/MyB;EDgNzB,iBCnOsB,EDoOvB;;AAGD;EACE,mBAAkB,EACnB;;AAGD;EACE,qBCzNsB;ED0NtB,sBC5NkB,ED6NnB;;AAGD;EACE,qBC/NsB,EDgOvB;;AAGD;EAEI,qBCpO2B;EDqO3B,iBAAgB,EACjB;;AAIH;EACE,oBC1OyB,EDgP1B;EAPD;IAII,sBC3O8B;ID4O9B,kBC1UmB,ED2UpB;;AAIH;EACE,iBCzQ0B;ED0Q1B,uCE1WqD;EF2WrD,+BC9ViB,EDoWlB;EATD;IAMI,iBC/QoB;IDgRpB,eCjWa,EDkWd;;AAIH;EACE,eAAc;EACd,qBEtXqD;EFuXrD,eCzWe,ED8WhB;EARD;IAMI,cC7PgB,EAAa;;ADkQjC;EACE,kCCjXW;EDkXX,aAAY;EACZ,sBAAqB,EACtB;;AAGD;EACE,UAAS,EACV;;AAGD;EACE,sCE5YqD;EF8YrD,aCxSc;EDySd,0BC1SqB;ED4SrB,6DC3UmE;ED4UnE,oBC1XyB;ED2XzB,eCpYW,EDqYZ;;AAGD;EACE,UAAS;EACT,4BEpZS;EFsZT,0BC/YgB;EDiZhB,6DCvVmE;EDwVnE,eC/YW,EDoZZ;;AI5cD;EACE,mBHqLyB;EGpLzB,sBHqL4B;EGnL5B,oBH6DyB;EG5DzB,iBH8KsB;EG7KtB,eHiDe,EGhDhB;;AAGD;EACE,gBHsKqC;EGrKrC,iBHsKiB,EGrKlB;;AAGD;EACE,kBHuKmB;EGtKnB,eAAc,EAKf;EAHC;IACE,kBAAiB,EAClB;;AAGH;EAGI,eAAgC;EAChC,iBAAgB,EACjB;;AC/DK;EACE,iBARe,EAShB;;AAFD;EACE,kBARsB,EASvB;;AAFD;EACE,mBAR8B,EAS/B;;AAFD;EACE,oBARuC,EASxC;;AFmJL;EE1JI;IACE,iBAHe,EAIhB;EAFD;IACE,kBAHsB,EAIvB;EAFD;IACE,mBAH8B,EAI/B;EAFD;IACE,oBAHuC,EAIxC,EAAA;;AFwJL;EE1JI;IACE,iBAHe,EAIhB;EAFD;IACE,kBAHsB,EAIvB;EAFD;IACE,mBAH8B,EAI/B;EAFD;IACE,oBAHuC,EAIxC,EAAA;;ACET;EAAkB,yBAAwB,EAAK;;AAE/C;EACE;IAEI,mCAAkC;IAGpC,4BAA2B;IAE3B,wBAAuB;IACvB,6BAA4B,EAC7B;EAED;IAAkB,0BAAyB,EAAK;EAChD;IAAkB,yBAAwB,EAAK;EAE/C;IAAuB,0BAAyB,EAAK;EACrD;IAAuB,uCAAsC,EAAK;EAClE;IAAuB,oCAAmC,EAAK;EAC/D;IAAoB,8BAA6B,EAAK;EACtD;IAAoB,+BAA8B,EAAK;EACvD;IAAoB,+BAA8B,EAAK;EAGvD;;IACY,2BAA0B,EAAI;EAExC;IAAgB,6BAA4B,EAAI;EAIlD;;;IAEqB,YAAW,EAAK;EAGrC;IAAoB,8BAA6B,EAAI;EAGrD;;IAEE,0BL+Ca;IK9Cb,yBAAwB,EACzB;EAGD;IAAQ,4BAA2B,EAAK;EAExC;;IACM,yBAAwB,EAAK;EAEnC;IAAM,2BAA0B,EAAK;EAErC;IAAQ,cAAa,EAAA;EAErB;;;IAGE,WAAU;IACV,UAAS,EACV;EAGD;;IACK,wBAAuB,EAAK;EAGjC;IACE,wBAAuB,EACxB,EAAA;;AC6NH;EA9GA,0BAAyB;EACzB,YAAW;EACX,oBNvFkB;EMwFlB,iBNnFe,EMgMd;EApMD;IAGE,0BCnB6C;IDoB7C,0BNVW,EMWZ;EAGD;IACE,kCL/BqD;IKgCrD,kBNPqB,EMQtB;EAGD;IACE,oBC/B6C;IDgC7C,eNvBW,EMwBZ;EAGD;IACE,oBCrC6C;IDsC7C,eN7BW,EM8BZ;EAGD;IAII,wBAAuB,EACxB;EALH;IAUI,kCL1DmD;IK2DnD,kBNlCmB;IMmCnB,iBAAY,EACb;EAIH;IAGI,kCLpEmD,EKqEpD;EA1EH;IAIM,iBAAgB;IAChB,0BCMyC,EDL1C;EA8ED;IAEE,0BNjEO,EMkER;IApEL;MACE,iBAAgB;MAChB,iCCV6C;MDW7C,0BNDW,EMEZ;;AJ8DG;EImHF;IACE,cAAa,EACd;EAGH;IACE,cAAa,EACd;EAED;;;IAGE,eAAc,EACf;EAED;IACE,cAAa,EACd,EAAA;;AAcD;EAvGA,eAAc;EACd,YAAW;EACX,iBAAgB,EAuGf;;AAlGK;EAGF,0BNykBmE,EMxkBpE;;AAGG;EAGF,0BNokBmE,EMnkBpE;;AAGG;EAGF,0BNqjByD,EMpjB1D;;AAMmB;EAChB,0BN8iBmF,EM7iBpF;;AA8EL;EACE,iBAAgB,EAKjB;EAND;IAII,YAAW,EACZ;;AEtUL;EACE,gBRqFqB;EQpFrB,wDRwG2D,EQvG5D;;AAwBD,wEAAwE;AACxE;;;EAII,iBAAgB,EACjB;;AALH;;;EAOI,mBAAkB,EACnB;;AARH;;;EAUI,kBAAiB,EAClB;;AAXH;;;EAaI,oBAAmB,EACpB;;AAGH;EAEI,YAAW,EACZ;;AAHH;EAKI,eAAc;EACd,eAAc,EACf;;AAGH;EAEI,eAAc;EACd,eAAc,EACf;;AAGH,uCAAuC;AACvC;EACE,eAAc;EACd,wBAAuB,EACxB;;AAED;EACE,eAAc,EAEf;;AAED,wCAAwC;AACxC;EACE,eAAc;EACd,6BAA4B,EAC7B;;AAOD,6EAA6E;AAmB7E,sCAAsC;AACtC;EACE,iBAAgB,EACjB","file":"../Rte.css","sourcesContent":["@charset \"UTF-8\";\n/**\n * Foundation for Sites by ZURB\n * Version 6.4.3\n * foundation.zurb.com\n * Licensed under MIT Open Source\n */\n@font-face {\n  font-family: \"Lato\";\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"../Fonts/Lato/LatoLatin-Regular.woff2\") format(\"woff2\"), url(\"../Fonts/Lato/LatoLatin-Regular.woff\") format(\"woff\"), url(\"../Fonts/Lato/LatoLatin-Regular.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"Lato\";\n  font-style: italic;\n  font-weight: 400;\n  src: url(\"../Fonts/Lato/LatoLatin-Italic.woff2\") format(\"woff2\"), url(\"../Fonts/Lato/LatoLatin-Italic.woff\") format(\"woff\"), url(\"../Fonts/Lato/LatoLatin-Italic.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"Lato\";\n  font-style: normal;\n  font-weight: 700;\n  src: url(\"../Fonts/Lato/LatoLatin-Bold.woff2\") format(\"woff2\"), url(\"../Fonts/Lato/LatoLatin-Bold.woff\") format(\"woff\"), url(\"../Fonts/Lato/LatoLatin-Bold.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"Lato\";\n  font-style: italic;\n  font-weight: 700;\n  src: url(\"../Fonts/Lato/LatoLatin-BoldItalic.woff2\") format(\"woff2\"), url(\"../Fonts/Lato/LatoLatin-BoldItalic.woff\") format(\"woff\"), url(\"../Fonts/Lato/LatoLatin-BoldItalic.ttf\") format(\"truetype\"); }\n\ndiv,\ndl,\ndt,\ndd,\nul,\nol,\nli,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\npre,\nform,\np,\nblockquote,\nth,\ntd {\n  margin: 0;\n  padding: 0; }\n\np {\n  margin-bottom: 1rem;\n  font-size: inherit;\n  line-height: 1.6;\n  text-rendering: optimizeLegibility; }\n\nem,\ni {\n  font-style: italic;\n  line-height: inherit; }\n\nstrong,\nb {\n  font-weight: bold;\n  line-height: inherit; }\n\nsmall {\n  font-size: 80%;\n  line-height: inherit; }\n\nh1, .h1,\nh2, .h2,\nh3, .h3,\nh4, .h4,\nh5, .h5,\nh6, .h6 {\n  font-family: Lato, Helvetica, Roboto, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  color: inherit;\n  text-rendering: optimizeLegibility; }\n  h1 small, .h1 small,\n  h2 small, .h2 small,\n  h3 small, .h3 small,\n  h4 small, .h4 small,\n  h5 small, .h5 small,\n  h6 small, .h6 small {\n    line-height: 0;\n    color: #cacaca; }\n\nh1, .h1 {\n  font-size: 1.5rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh2, .h2 {\n  font-size: 1.25rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh3, .h3 {\n  font-size: 1.1875rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh4, .h4 {\n  font-size: 1.125rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh5, .h5 {\n  font-size: 1.0625rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\nh6, .h6 {\n  font-size: 1rem;\n  line-height: 1.4;\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\n@media print, screen and (min-width: 37.5em) {\n  h1, .h1 {\n    font-size: 3rem; }\n  h2, .h2 {\n    font-size: 2.5rem; }\n  h3, .h3 {\n    font-size: 1.9375rem; }\n  h4, .h4 {\n    font-size: 1.5625rem; }\n  h5, .h5 {\n    font-size: 1.25rem; }\n  h6, .h6 {\n    font-size: 1rem; } }\n\na {\n  line-height: inherit;\n  color: #e87c0c;\n  text-decoration: none;\n  cursor: pointer; }\n  a:hover, a:focus {\n    color: #c86b0a; }\n  a img {\n    border: 0; }\n\nhr {\n  clear: both;\n  max-width: 60rem;\n  height: 0;\n  margin: 1.25rem auto;\n  border-top: 0;\n  border-right: 0;\n  border-bottom: 1px solid #cacaca;\n  border-left: 0; }\n\nul,\nol,\ndl {\n  margin-bottom: 1rem;\n  list-style-position: outside;\n  line-height: 1.6; }\n\nli {\n  font-size: inherit; }\n\nul {\n  margin-left: 1.25rem;\n  list-style-type: disc; }\n\nol {\n  margin-left: 1.25rem; }\n\nul ul, ol ul, ul ol, ol ol {\n  margin-left: 1.25rem;\n  margin-bottom: 0; }\n\ndl {\n  margin-bottom: 1rem; }\n  dl dt {\n    margin-bottom: 0.3rem;\n    font-weight: bold; }\n\nblockquote {\n  margin: 0 0 1rem;\n  padding: 0.5625rem 1.25rem 0 1.1875rem;\n  border-left: 1px solid #cacaca; }\n  blockquote, blockquote p {\n    line-height: 1.6;\n    color: #8a8a8a; }\n\ncite {\n  display: block;\n  font-size: 0.8125rem;\n  color: #8a8a8a; }\n  cite:before {\n    content: \"— \"; }\n\nabbr, abbr[title] {\n  border-bottom: 1px dotted #0a0a0a;\n  cursor: help;\n  text-decoration: none; }\n\nfigure {\n  margin: 0; }\n\ncode {\n  padding: 0.125rem 0.3125rem 0.0625rem;\n  border: none;\n  background-color: inherit;\n  font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n  font-weight: normal;\n  color: #0a0a0a; }\n\nkbd {\n  margin: 0;\n  padding: 0.125rem 0.25rem 0;\n  background-color: #e6e6e6;\n  font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n  color: #0a0a0a; }\n\n.subheader {\n  margin-top: 0.2rem;\n  margin-bottom: 0.5rem;\n  font-weight: normal;\n  line-height: 1.4;\n  color: #8a8a8a; }\n\n.lead {\n  font-size: 125%;\n  line-height: 1.6; }\n\n.stat {\n  font-size: 2.5rem;\n  line-height: 1; }\n  p + .stat {\n    margin-top: -1rem; }\n\nul.no-bullet, ol.no-bullet {\n  margin-left: 0;\n  list-style: none; }\n\n.text-left {\n  text-align: left; }\n\n.text-right {\n  text-align: right; }\n\n.text-center {\n  text-align: center; }\n\n.text-justify {\n  text-align: justify; }\n\n@media print, screen and (min-width: 37.5em) {\n  .medium-text-left {\n    text-align: left; }\n  .medium-text-right {\n    text-align: right; }\n  .medium-text-center {\n    text-align: center; }\n  .medium-text-justify {\n    text-align: justify; } }\n\n@media print, screen and (min-width: 60em) {\n  .large-text-left {\n    text-align: left; }\n  .large-text-right {\n    text-align: right; }\n  .large-text-center {\n    text-align: center; }\n  .large-text-justify {\n    text-align: justify; } }\n\n.show-for-print {\n  display: none !important; }\n\n@media print {\n  * {\n    background: transparent !important;\n    box-shadow: none !important;\n    color: black !important;\n    text-shadow: none !important; }\n  .show-for-print {\n    display: block !important; }\n  .hide-for-print {\n    display: none !important; }\n  table.show-for-print {\n    display: table !important; }\n  thead.show-for-print {\n    display: table-header-group !important; }\n  tbody.show-for-print {\n    display: table-row-group !important; }\n  tr.show-for-print {\n    display: table-row !important; }\n  td.show-for-print {\n    display: table-cell !important; }\n  th.show-for-print {\n    display: table-cell !important; }\n  a,\n  a:visited {\n    text-decoration: underline; }\n  a[href]:after {\n    content: \" (\" attr(href) \")\"; }\n  .ir a:after,\n  a[href^='javascript:']:after,\n  a[href^='#']:after {\n    content: ''; }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\"; }\n  pre,\n  blockquote {\n    border: 1px solid #8a8a8a;\n    page-break-inside: avoid; }\n  thead {\n    display: table-header-group; }\n  tr,\n  img {\n    page-break-inside: avoid; }\n  img {\n    max-width: 100% !important; }\n  @page {\n    margin: 0.5cm; }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3; }\n  h2,\n  h3 {\n    page-break-after: avoid; }\n  .print-break-inside {\n    page-break-inside: auto; } }\n\ntable {\n  border-collapse: collapse;\n  width: 100%;\n  margin-bottom: 1rem;\n  border-radius: 0; }\n  thead, tbody, tfoot {\n    border: 1px solid #f1f1f1;\n    background-color: #fefefe; }\n  caption {\n    padding: 0.5rem 0.625rem 0.625rem;\n    font-weight: bold; }\n  thead {\n    background: #f8f8f8;\n    color: #0a0a0a; }\n  tfoot {\n    background: #f1f1f1;\n    color: #0a0a0a; }\n  thead tr, tfoot tr {\n    background: transparent; }\n  thead th, thead td, tfoot th, tfoot td {\n    padding: 0.5rem 0.625rem 0.625rem;\n    font-weight: bold;\n    text-align: left; }\n  tbody th, tbody td {\n    padding: 0.5rem 0.625rem 0.625rem; }\n  tbody tr:nth-child(even) {\n    border-bottom: 0;\n    background-color: #f1f1f1; }\n  table.unstriped tbody {\n    background-color: #fefefe; }\n    table.unstriped tbody tr {\n      border-bottom: 0;\n      border-bottom: 1px solid #f1f1f1;\n      background-color: #fefefe; }\n\n@media screen and (max-width: 59.9375em) {\n  table.stack thead {\n    display: none; }\n  table.stack tfoot {\n    display: none; }\n  table.stack tr,\n  table.stack th,\n  table.stack td {\n    display: block; }\n  table.stack td {\n    border-top: 0; } }\n\ntable.scroll {\n  display: block;\n  width: 100%;\n  overflow-x: auto; }\n\ntable.hover thead tr:hover {\n  background-color: #f3f3f3; }\n\ntable.hover tfoot tr:hover {\n  background-color: #ececec; }\n\ntable.hover tbody tr:hover {\n  background-color: #f9f9f9; }\n\ntable.hover:not(.unstriped) tr:nth-of-type(even):hover {\n  background-color: #ececec; }\n\n.table-scroll {\n  overflow-x: auto; }\n  .table-scroll table {\n    width: auto; }\n\n.cke_editable {\n  font-size: 100%;\n  font-family: Lato, Helvetica, Roboto, Arial, sans-serif; }\n\n/* Left, center, right and justify alignment of text in block elements*/\np.align-left, td.align-left, th.align-left,\nh1.align-left, h2.align-left, h3.align-left, h4.align-left, h5.align-left, h6.align-left,\ndiv.align-left, address.align-left {\n  text-align: left; }\n\np.align-center, td.align-center, th.align-center,\nh1.align-center, h2.align-center, h3.align-center, h4.align-center, h5.align-center, h6.align-center,\ndiv.align-center, address.align-center {\n  text-align: center; }\n\np.align-right, td.align-right, th.align-right,\nh1.align-right, h2.align-right, h3.align-right, h4.align-right, h5.align-right, h6.align-right,\ndiv.align-right, address.align-right {\n  text-align: right; }\n\np.align-justify, td.align-justify, th.align-justify,\nh1.align-justify, h2.align-justify, h3.align-justify, h4.align-justify, h5.align-justify, h6.align-justify,\ndiv.align-justify, address.align-justify {\n  text-align: justify; }\n\nspan.c-important {\n  color: #f90; }\n\nspan.c-tiny {\n  color: #999999;\n  font-size: 75%; }\n\np.p-tiny {\n  color: #999999;\n  font-size: 75%; }\n\n/* Bullet styles for unordered lists.*/\nul.component-items {\n  color: #186900;\n  list-style-type: circle; }\n\nul.ul-style1 {\n  color: #8A0020; }\n\n/* Numbering styles for ordered lists.*/\nol.ul-style2 {\n  color: #10007B;\n  list-style-type: lower-roman; }\n\n/* Selectors for the default configuration of the link accessibity feature.*/\n/* Default selector for indentation.*/\ndiv.indent {\n  margin-left: 2em; }\n","/**\n * Foundation for Sites by ZURB\n * Version 6.4.3\n * foundation.zurb.com\n * Licensed under MIT Open Source\n */\n\n// Dependencies\n@import '../_vendor/normalize-scss/sass/normalize';\n@import '../_vendor/sassy-lists/stylesheets/helpers/missing-dependencies';\n@import '../_vendor/sassy-lists/stylesheets/helpers/true';\n@import '../_vendor/sassy-lists/stylesheets/functions/contain';\n@import '../_vendor/sassy-lists/stylesheets/functions/purge';\n@import '../_vendor/sassy-lists/stylesheets/functions/remove';\n@import '../_vendor/sassy-lists/stylesheets/functions/replace';\n@import '../_vendor/sassy-lists/stylesheets/functions/to-list';\n\n// Settings\n// import your own `settings` here or\n// import and modify the default settings through\n// @import 'settings/settings';\n\n// Sass utilities\n@import 'util/util';\n\n// Global variables and styles\n@import 'global';\n\n// Components\n@import 'grid/grid';\n@import 'xy-grid/xy-grid';\n@import 'typography/typography';\n@import 'forms/forms';\n@import 'components/visibility';\n@import 'components/float';\n@import 'components/button';\n@import 'components/button-group';\n@import 'components/accordion-menu';\n@import 'components/accordion';\n@import 'components/badge';\n@import 'components/breadcrumbs';\n@import 'components/callout';\n@import 'components/card';\n@import 'components/close-button';\n@import 'components/drilldown';\n@import 'components/dropdown-menu';\n@import 'components/dropdown';\n@import 'components/flex';\n@import 'components/responsive-embed';\n@import 'components/label';\n@import 'components/media-object';\n@import 'components/menu';\n@import 'components/menu-icon';\n@import 'components/off-canvas';\n@import 'components/orbit';\n@import 'components/pagination';\n@import 'components/progress-bar';\n@import 'components/reveal';\n@import 'components/slider';\n@import 'components/sticky';\n@import 'components/switch';\n@import 'components/table';\n@import 'components/tabs';\n@import 'components/title-bar';\n@import 'components/top-bar';\n@import 'components/thumbnail';\n@import 'components/tooltip';\n@import 'prototype/prototype';\n\n@mixin foundation-everything(\n  $flex: true,\n  $prototype: false\n) {\n  @if $flex {\n    $global-flexbox: true !global;\n  }\n\n  @include foundation-global-styles;\n  @if not $flex {\n    @include foundation-grid;\n  }\n  @else {\n    @if $xy-grid {\n      @include foundation-xy-grid-classes;\n    }\n    @else {\n      @include foundation-flex-grid;\n    }\n  }\n  @include foundation-typography;\n  @include foundation-forms;\n  @include foundation-button;\n  @include foundation-accordion;\n  @include foundation-accordion-menu;\n  @include foundation-badge;\n  @include foundation-breadcrumbs;\n  @include foundation-button-group;\n  @include foundation-callout;\n  @include foundation-card;\n  @include foundation-close-button;\n  @include foundation-menu;\n  @include foundation-menu-icon;\n  @include foundation-drilldown-menu;\n  @include foundation-dropdown;\n  @include foundation-dropdown-menu;\n  @include foundation-responsive-embed;\n  @include foundation-label;\n  @include foundation-media-object;\n  @include foundation-off-canvas;\n  @include foundation-orbit;\n  @include foundation-pagination;\n  @include foundation-progress-bar;\n  @include foundation-slider;\n  @include foundation-sticky;\n  @include foundation-reveal;\n  @include foundation-switch;\n  @include foundation-table;\n  @include foundation-tabs;\n  @include foundation-thumbnail;\n  @include foundation-title-bar;\n  @include foundation-tooltip;\n  @include foundation-top-bar;\n  @include foundation-visibility-classes;\n  @include foundation-float-classes;\n\n  @if $flex {\n    @include foundation-flex-classes;\n  }\n\n  @if $prototype {\n    @include foundation-prototype-classes;\n  }\n}\n","@function str-replace($string, $search, $replace: \"\") {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n}\n\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n\n  $extmods: (\n      eot: \"?\",\n      svg: \"#\" + str-replace($name, \" \", \"_\")\n  );\n\n  $formats: (\n      otf: \"opentype\",\n      ttf: \"truetype\"\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + \".\" + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n}\n\n//Lato\n@include font-face('Lato', '#{$font-path}Lato/LatoLatin-Regular', 400, normal, woff2 woff ttf);\n@include font-face('Lato', '#{$font-path}Lato/LatoLatin-Italic', 400, italic, woff2 woff ttf);\n@include font-face('Lato', '#{$font-path}Lato/LatoLatin-Bold', 700, normal, woff2 woff ttf);\n@include font-face('Lato', '#{$font-path}Lato/LatoLatin-BoldItalic', 700, italic, woff2 woff ttf);\n\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group typography-base\n////\n\n// Base Typography\n// - - - - - - - - - - - - - - -\n// These are styles applied to basic HTML tags, including:\n//   - Paragraphs <p>\n//   - Bold/italics <b> <strong> <i> <em>\n//   - Small text <small>\n//   - Headings <h1>-<h6>\n//   - Anchors <a>\n//   - Dividers <hr>\n//   - Lists <ul> <ol> <dl>\n//   - Blockquotes <blockquote>\n//   - Code blocks <code>\n//   - Abbreviations <abbr>\n//   - Citations <cite>\n//   - Keystrokes <kbd>\n\n/// Font family for header elements.\n/// @type String | List\n$header-font-family: $body-font-family !default;\n\n/// Font weight of headers.\n/// @type String\n$header-font-weight: $global-weight-normal !default;\n\n/// Font style (e.g. italicized) of headers.\n/// @type String\n$header-font-style: normal !default;\n\n/// Font stack used for elements that use monospaced type, such as code samples\n/// @type String | List\n$font-family-monospace: Consolas, 'Liberation Mono', Courier, monospace !default;\n\n/// Color of headers.\n/// @type Color\n$header-color: inherit !default;\n\n/// Line height of headers.\n/// @type Number\n$header-lineheight: 1.4 !default;\n\n/// Bottom margin of headers.\n/// @type Number\n$header-margin-bottom: 0.5rem !default;\n\n/// Styles for headings at various screen sizes. Each key is a breakpoint, and each value is a map of heading styles.\n/// @type Map\n$header-styles: (\n  small: (\n    'h1': ('font-size': 24),\n    'h2': ('font-size': 20),\n    'h3': ('font-size': 19),\n    'h4': ('font-size': 18),\n    'h5': ('font-size': 17),\n    'h6': ('font-size': 16),\n  ),\n  medium: (\n    'h1': ('font-size': 48),\n    'h2': ('font-size': 40),\n    'h3': ('font-size': 31),\n    'h4': ('font-size': 25),\n    'h5': ('font-size': 20),\n    'h6': ('font-size': 16),\n  ),\n) !default;\n\n// $header-styles map is built from $header-sizes in order to ensure downward compatibility\n// when $header-sizes is depreciated, $header-styles needs to get !default values like settings.scss\n@function build_from_header-sizes($header-sizes) {\n  @warn 'Note, that $header-sizes has been replaced with $header-styles. $header-sizes still works, but it is going to be depreciated.';\n  $header-styles: ();\n  @each $size, $headers in $header-sizes {\n    $header-map: ();\n    @each $header, $font-size in $headers {\n      $header-map: map-merge($header-map, ($header: ('font-size': $font-size)));  \n    }\n    $header-styles: map-merge($header-styles, ($size: $header-map));\n  }\n  @return $header-styles;\n}\n\n// If it exists $headers-sizes is used to build $header-styles. See the documentation.\n@if variable-exists(header-sizes) {\n  $header-styles: build_from_header-sizes($header-sizes);\n}\n\n/// Text rendering method of headers.\n/// @type String\n$header-text-rendering: optimizeLegibility !default;\n\n/// Font size of `<small>` elements.\n/// @type Number\n$small-font-size: 80% !default;\n\n/// Color of `<small>` elements when placed inside headers.\n/// @type Color\n$header-small-font-color: $medium-gray !default;\n\n/// Line height of text inside `<p>` elements.\n/// @type Number\n$paragraph-lineheight: 1.6 !default;\n\n/// Bottom margin of paragraphs.\n/// @type Number\n$paragraph-margin-bottom: 1rem !default;\n\n/// Text rendering method for paragraph text.\n/// @type String\n$paragraph-text-rendering: optimizeLegibility !default;\n\n/// Text color of code samples.\n/// @type Color\n$code-color: $black !default;\n\n/// Font family of code samples.\n/// @type String | List\n$code-font-family: $font-family-monospace !default;\n\n/// Font weight of text in code samples.\n/// @type String\n$code-font-weight: $global-weight-normal !default;\n\n/// Background color of code samples.\n/// @type Color\n$code-background: $light-gray !default;\n\n/// Border around code samples.\n/// @type List\n$code-border: 1px solid $medium-gray !default;\n\n/// Padding around text of code samples.\n/// @type Number | List\n$code-padding: rem-calc(2 5 1) !default;\n\n/// Default color for links.\n/// @type Color\n$anchor-color: $primary-color !default;\n\n/// Default color for links on hover.\n/// @type Color\n$anchor-color-hover: scale-color($anchor-color, $lightness: -14%) !default;\n\n/// Default text decoration for links.\n/// @type String\n$anchor-text-decoration: none !default;\n\n/// Default text decoration for links on hover.\n/// @type String\n$anchor-text-decoration-hover: none !default;\n\n/// Maximum width of a divider.\n/// @type Number\n$hr-width: $global-width !default;\n\n/// Default border for a divider.\n/// @type List\n$hr-border: 1px solid $medium-gray !default;\n\n/// Default margin for a divider.\n/// @type Number | List\n$hr-margin: rem-calc(20) auto !default;\n\n/// Line height for items in a list.\n/// @type Number\n$list-lineheight: $paragraph-lineheight !default;\n\n/// Bottom margin for items in a list.\n/// @type Number\n$list-margin-bottom: $paragraph-margin-bottom !default;\n\n/// Bullet type to use for unordered lists (e.g., `square`, `circle`, `disc`).\n/// @type String\n$list-style-type: disc !default;\n\n/// Positioning for bullets on unordered list items.\n/// @type String\n$list-style-position: outside !default;\n\n/// Left (or right) margin for lists.\n/// @type Number\n$list-side-margin: 1.25rem !default;\n\n/// Left (or right) margin for a list inside a list.\n/// @type Number\n$list-nested-side-margin: 1.25rem !default;\n\n/// Bottom margin for `<dl>` elements.\n/// @type Number\n$defnlist-margin-bottom: 1rem !default;\n\n/// Font weight for `<dt>` elements.\n/// @type String\n$defnlist-term-weight: $global-weight-bold !default;\n\n/// Spacing between `<dt>` and `<dd>` elements.\n/// @type Number\n$defnlist-term-margin-bottom: 0.3rem !default;\n\n/// Text color of `<blockquote>` elements.\n/// @type Color\n$blockquote-color: $dark-gray !default;\n\n/// Padding inside a `<blockquote>` element.\n/// @type Number | List\n$blockquote-padding: rem-calc(9 20 0 19) !default;\n\n/// Side border for `<blockquote>` elements.\n/// @type List\n$blockquote-border: 1px solid $medium-gray !default;\n\n/// Font size for `<cite>` elements.\n/// @type Number\n$cite-font-size: rem-calc(13) !default;\n\n/// Text color for `<cite>` elements.\n/// @type Color\n$cite-color: $dark-gray !default;\n\n/// Pseudo content for `<cite>` elements.\n/// @type String\n$cite-pseudo-content: '\\2014 \\0020' !default;\n\n/// Font family for `<kbd>` elements.\n/// @type String | List\n$keystroke-font: $font-family-monospace !default;\n\n/// Text color for `<kbd>` elements.\n/// @type Color\n$keystroke-color: $black !default;\n\n/// Background color for `<kbd>` elements.\n/// @type Color\n$keystroke-background: $light-gray !default;\n\n/// Padding for `<kbd>` elements.\n/// @type Number | List\n$keystroke-padding: rem-calc(2 4 0) !default;\n\n/// Border radius for `<kbd>` elements.\n/// @type Number | List\n$keystroke-radius: $global-radius !default;\n\n/// Bottom border style for `<abbr>` elements.\n/// @type List\n$abbr-underline: 1px dotted $black !default;\n\n@mixin foundation-typography-base {\n  // Typography resets\n  div,\n  dl,\n  dt,\n  dd,\n  ul,\n  ol,\n  li,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  pre,\n  form,\n  p,\n  blockquote,\n  th,\n  td {\n    margin: 0;\n    padding: 0;\n  }\n\n  // Paragraphs\n  p {\n    margin-bottom: $paragraph-margin-bottom;\n\n    font-size: inherit;\n    line-height: $paragraph-lineheight;\n    text-rendering: $paragraph-text-rendering;\n  }\n\n  // Emphasized text\n  em,\n  i {\n    font-style: italic;\n    line-height: inherit;\n  }\n\n  // Strong text\n  strong,\n  b {\n    font-weight: $global-weight-bold;\n    line-height: inherit;\n  }\n\n  // Small text\n  small {\n    font-size: $small-font-size;\n    line-height: inherit;\n  }\n\n  // Headings\n  h1, .h1,\n  h2, .h2,\n  h3, .h3,\n  h4, .h4,\n  h5, .h5,\n  h6, .h6 {\n    font-family: $header-font-family;\n    font-style: $header-font-style;\n    font-weight: $header-font-weight;\n    color: $header-color;\n    text-rendering: $header-text-rendering;\n\n    small {\n      line-height: 0;\n      color: $header-small-font-color;\n    }\n  }\n\n  // Heading styles\n  @each $size, $headers in $header-styles {\n    @include breakpoint($size) {\n      @each $header, $header-defs in $headers {\n        $font-size-temp: 1rem;\n        #{$header}, .#{$header} {\n\n          @if map-has-key($header-defs, font-size) {\n            $font-size-temp: rem-calc(map-get($header-defs, font-size));\n            font-size: $font-size-temp;\n          } @else if map-has-key($header-defs, fs) {\n            $font-size-temp: rem-calc(map-get($header-defs, fs));\n            font-size: $font-size-temp;\n          } @else if $size == $-zf-zero-breakpoint {\n            font-size: $font-size-temp;\n          }\n          @if map-has-key($header-defs, line-height) {\n            line-height: unitless-calc(map-get($header-defs, line-height), $font-size-temp);\n          } @else if map-has-key($header-defs, lh) {\n            line-height: unitless-calc(map-get($header-defs, lh), $font-size-temp);\n          } @else if $size == $-zf-zero-breakpoint {\n            line-height: unitless-calc($header-lineheight, $font-size-temp);\n          }\n\n          @if map-has-key($header-defs, margin-top) {\n            margin-top: rem-calc(map-get($header-defs, margin-top));\n          } @else if map-has-key($header-defs, mt) {\n            margin-top: rem-calc(map-get($header-defs, mt));\n          } @else if $size == $-zf-zero-breakpoint {\n            margin-top: 0;\n          }\n          @if map-has-key($header-defs, margin-bottom) {\n            margin-bottom: rem-calc(map-get($header-defs, margin-bottom));\n          } @else if map-has-key($header-defs, mb) {\n            margin-bottom: rem-calc(map-get($header-defs, mb));\n          } @else if $size == $-zf-zero-breakpoint {\n            margin-bottom: rem-calc($header-margin-bottom);\n          }\n        }\n      }\n    }\n  }\n\n  // Links\n  a {\n    line-height: inherit;\n    color: $anchor-color;\n    text-decoration: $anchor-text-decoration;\n\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      color: $anchor-color-hover;\n      @if $anchor-text-decoration-hover != $anchor-text-decoration {\n        text-decoration: $anchor-text-decoration-hover;\n      }\n    }\n\n    img {\n      border: 0;\n    }\n  }\n\n  // Horizontal rule\n  hr {\n    clear: both;\n\n    max-width: $hr-width;\n    height: 0;\n    margin: $hr-margin;\n\n    border-top: 0;\n    border-right: 0;\n    border-bottom: $hr-border;\n    border-left: 0;\n  }\n\n  // Lists\n  ul,\n  ol,\n  dl {\n    margin-bottom: $list-margin-bottom;\n    list-style-position: $list-style-position;\n    line-height: $list-lineheight;\n  }\n\n  // List items\n  li {\n    font-size: inherit;\n  }\n\n  // Unordered lists\n  ul {\n    margin-#{$global-left}: $list-side-margin;\n    list-style-type: $list-style-type;\n  }\n\n  // Ordered lists\n  ol {\n    margin-#{$global-left}: $list-side-margin;\n  }\n\n  // Nested unordered/ordered lists\n  ul, ol {\n    & & {\n      margin-#{$global-left}: $list-nested-side-margin;\n      margin-bottom: 0;\n    }\n  }\n\n  // Definition lists\n  dl {\n    margin-bottom: $defnlist-margin-bottom;\n\n    dt {\n      margin-bottom: $defnlist-term-margin-bottom;\n      font-weight: $defnlist-term-weight;\n    }\n  }\n\n  // Blockquotes\n  blockquote {\n    margin: 0 0 $paragraph-margin-bottom;\n    padding: $blockquote-padding;\n    border-#{$global-left}: $blockquote-border;\n\n    &, p {\n      line-height: $paragraph-lineheight;\n      color: $blockquote-color;\n    }\n  }\n\n  // Citations\n  cite {\n    display: block;\n    font-size: $cite-font-size;\n    color: $cite-color;\n\n    &:before {\n      content: $cite-pseudo-content;\n    }\n  }\n\n  // Abbreviations\n  abbr, abbr[title] {\n    border-bottom: $abbr-underline;\n    cursor: help;\n    text-decoration: none;\n  }\n\n  // Figures\n  figure {\n    margin: 0;\n  }\n  \n  // Code\n  code {\n    padding: $code-padding;\n\n    border: $code-border;\n    background-color: $code-background;\n\n    font-family: $code-font-family;\n    font-weight: $code-font-weight;\n    color: $code-color;\n  }\n\n  // Keystrokes\n  kbd {\n    margin: 0;\n    padding: $keystroke-padding;\n\n    background-color: $keystroke-background;\n\n    font-family: $keystroke-font;\n    color: $keystroke-color;\n\n    @if has-value($keystroke-radius) {\n      border-radius: $keystroke-radius;\n    }\n  }\n}\n","//  Foundation for Sites Settings\n//  -----------------------------\n//\n//  Table of Contents:\n//\n//   1. Global\n//   2. Breakpoints\n//   3. The Grid\n//   4. Base Typography\n//   5. Typography Helpers\n//   6. Abide\n//   7. Accordion\n//   8. Accordion Menu\n//   9. Badge\n//  10. Breadcrumbs\n//  11. Button\n//  12. Button Group\n//  13. Callout\n//  14. Card\n//  15. Close Button\n//  16. Drilldown\n//  17. Dropdown\n//  18. Dropdown Menu\n//  19. Flexbox Utilities\n//  20. Forms\n//  21. Label\n//  22. Media Object\n//  23. Menu\n//  24. Meter\n//  25. Off-canvas\n//  26. Orbit\n//  27. Pagination\n//  28. Progress Bar\n//  29. Prototype Arrow\n//  30. Prototype Border-Box\n//  31. Prototype Border-None\n//  32. Prototype Bordered\n//  33. Prototype Display\n//  34. Prototype Font-Styling\n//  35. Prototype List-Style-Type\n//  36. Prototype Overflow\n//  37. Prototype Position\n//  38. Prototype Rounded\n//  39. Prototype Separator\n//  40. Prototype Shadow\n//  41. Prototype Sizing\n//  42. Prototype Spacing\n//  43. Prototype Text-Decoration\n//  44. Prototype Text-Transformation\n//  45. Prototype Text-Utilities\n//  46. Responsive Embed\n//  47. Reveal\n//  48. Slider\n//  49. Switch\n//  50. Table\n//  51. Tabs\n//  52. Thumbnail\n//  53. Title Bar\n//  54. Tooltip\n//  55. Top Bar\n//  56. Xy Grid\n@import '../../../Build/bower_components/foundation-sites/scss/util/util';\n\n//Project\n//\n$baseline: 22px;\n\n$column-spacing: 8px;\n$row-spacing: 8px;\n$text-margin: 16px;\n$max-width-intext: 48%;\n\n$border-width: 2px;\n$border-color: #000;\n$border-padding: 0;\n\n$frame-spaces: (\n    extra-small: 0.5rem,\n    small: 1rem,\n    medium: 1.5rem,\n    large: 2rem,\n    extra-large: 2.5rem\n);\n\n// 1. Global\n// ---------\n\n$global-font-size: 100%;\n$global-width: rem-calc(960);\n$global-lineheight: 1.5;\n$foundation-palette: (\n    primary: #e87c0c,\n    secondary: #777,\n    success: #3adb76,\n    warning: #ffae00,\n    alert: #ec5840,\n    bg-1: #d8ffbb,\n    bg-2: #ffe4bb,\n    bg-3: #bbe0ff,\n);\n$light-gray: #e6e6e6;\n$medium-gray: #cacaca;\n$dark-gray: #8a8a8a;\n$black: #0a0a0a;\n$white: #fefefe;\n$body-background: $white;\n$body-font-color: $black;\n$body-font-family: Lato, Helvetica, Roboto, Arial, sans-serif;\n$body-antialiased: true;\n$global-margin: 1rem;\n$global-padding: 1rem;\n$global-position: 1rem;\n$global-weight-normal: normal;\n$global-weight-bold: bold;\n$global-radius: 0;\n$global-menu-padding: 0.7rem 1rem;\n$global-menu-nested-margin: 1rem;\n$global-text-direction: ltr;\n$global-flexbox: false;\n$global-prototype-breakpoints: false;\n$global-button-cursor: auto;\n$global-color-pick-contrast-tolerance: 0;\n$print-transparent-backgrounds: true;\n\n@include add-foundation-colors;\n\n// 2. Breakpoints\n// --------------\n\n$breakpoints: (\n    small: 0,\n    medium: 600px,\n    large: 960px,\n    xlarge: 1280px,\n    xxlarge: 1440px,\n);\n$print-breakpoint: large;\n$breakpoint-classes: (small medium large);\n\n// 3. The Grid\n// -----------\n\n$grid-row-width: $global-width;\n$grid-column-count: 12;\n$grid-column-gutter: (\n    small: 15px,\n    medium: 30px,\n);\n$grid-column-align-edge: false;\n$grid-column-alias: 'columns';\n$block-grid-max: 8;\n\n// 4. Base Typography\n// ------------------\n\n$header-font-family: $body-font-family;\n$header-font-weight: $global-weight-normal;\n$header-font-style: normal;\n$font-family-monospace: Consolas, 'Liberation Mono', Courier, monospace;\n$header-color: inherit;\n$header-lineheight: 1.4;\n$header-margin-bottom: 0.5rem;\n$header-styles: (\n    small: (\n        'h1': ('font-size': 24),\n        'h2': ('font-size': 20),\n        'h3': ('font-size': 19),\n        'h4': ('font-size': 18),\n        'h5': ('font-size': 17),\n        'h6': ('font-size': 16),\n    ),\n    medium: (\n        'h1': ('font-size': 48),\n        'h2': ('font-size': 40),\n        'h3': ('font-size': 31),\n        'h4': ('font-size': 25),\n        'h5': ('font-size': 20),\n        'h6': ('font-size': 16),\n    ),\n);\n$header-text-rendering: optimizeLegibility;\n$small-font-size: 80%;\n$header-small-font-color: $medium-gray;\n$paragraph-lineheight: 1.6;\n$paragraph-margin-bottom: 1rem;\n$paragraph-text-rendering: optimizeLegibility;\n$code-color: $black;\n$code-font-family: $font-family-monospace;\n$code-font-weight: $global-weight-normal;\n$code-background: inherit;\n$code-border: none;\n$code-padding: rem-calc(2 5 1);\n$anchor-color: $primary-color;\n$anchor-color-hover: scale-color($anchor-color, $lightness: -14%);\n$anchor-text-decoration: none;\n$anchor-text-decoration-hover: none;\n$hr-width: $global-width;\n$hr-border: 1px solid $medium-gray;\n$hr-margin: rem-calc(20) auto;\n$list-lineheight: $paragraph-lineheight;\n$list-margin-bottom: $paragraph-margin-bottom;\n$list-style-type: disc;\n$list-style-position: outside;\n$list-side-margin: 1.25rem;\n$list-nested-side-margin: 1.25rem;\n$defnlist-margin-bottom: 1rem;\n$defnlist-term-weight: $global-weight-bold;\n$defnlist-term-margin-bottom: 0.3rem;\n$blockquote-color: $dark-gray;\n$blockquote-padding: rem-calc(9 20 0 19);\n$blockquote-border: 1px solid $medium-gray;\n$cite-font-size: rem-calc(13);\n$cite-color: $dark-gray;\n$cite-pseudo-content: '\\2014 \\0020';\n$keystroke-font: $font-family-monospace;\n$keystroke-color: $black;\n$keystroke-background: $light-gray;\n$keystroke-padding: rem-calc(2 4 0);\n$keystroke-radius: $global-radius;\n$abbr-underline: 1px dotted $black;\n\n// 5. Typography Helpers\n// ---------------------\n\n$lead-font-size: $global-font-size * 1.25;\n$lead-lineheight: 1.6;\n$subheader-lineheight: 1.4;\n$subheader-color: $dark-gray;\n$subheader-font-weight: $global-weight-normal;\n$subheader-margin-top: 0.2rem;\n$subheader-margin-bottom: 0.5rem;\n$stat-font-size: 2.5rem;\n\n// 6. Abide\n// --------\n\n$abide-inputs: true;\n$abide-labels: true;\n$input-background-invalid: get-color(alert);\n$form-label-color-invalid: get-color(alert);\n$input-error-color: get-color(alert);\n$input-error-font-size: rem-calc(12);\n$input-error-font-weight: $global-weight-bold;\n\n// 7. Accordion\n// ------------\n\n$accordion-background: $white;\n$accordion-plusminus: true;\n$accordion-title-font-size: rem-calc(12);\n$accordion-item-color: $primary-color;\n$accordion-item-background-hover: $light-gray;\n$accordion-item-padding: 1.25rem 1rem;\n$accordion-content-background: $white;\n$accordion-content-border: 1px solid $light-gray;\n$accordion-content-color: $body-font-color;\n$accordion-content-padding: 1rem;\n\n// 8. Accordion Menu\n// -----------------\n\n$accordionmenu-padding: $global-menu-padding;\n$accordionmenu-nested-margin: $global-menu-nested-margin;\n$accordionmenu-submenu-padding: $accordionmenu-padding;\n$accordionmenu-arrows: true;\n$accordionmenu-arrow-color: get-color(primary);\n$accordionmenu-item-background: $dark-gray;\n$accordionmenu-border: 1px solid $white;\n$accordionmenu-submenu-toggle-background: $dark-gray;\n$accordion-submenu-toggle-border: null;\n$accordionmenu-submenu-toggle-width: 38px;\n$accordionmenu-submenu-toggle-height: $accordionmenu-submenu-toggle-width;\n$accordionmenu-arrow-size: 6px;\n\n// 9. Badge\n// --------\n\n$badge-background: $primary-color;\n$badge-color: $white;\n$badge-color-alt: $black;\n$badge-palette: $foundation-palette;\n$badge-padding: 0.3em;\n$badge-minwidth: 2.1em;\n$badge-font-size: 0.6rem;\n\n// 10. Breadcrumbs\n// ---------------\n\n$breadcrumbs-margin: 0 0 $global-margin 0;\n$breadcrumbs-item-font-size: rem-calc(11);\n$breadcrumbs-item-color: $primary-color;\n$breadcrumbs-item-color-current: $black;\n$breadcrumbs-item-color-disabled: $medium-gray;\n$breadcrumbs-item-margin: 0.75rem;\n$breadcrumbs-item-uppercase: true;\n$breadcrumbs-item-separator: true;\n$breadcrumbs-item-separator-item: '/';\n$breadcrumbs-item-separator-item-rtl: '\\\\';\n$breadcrumbs-item-separator-color: $medium-gray;\n\n// 11. Button\n// ----------\n\n$button-font-family: inherit;\n$button-padding: 0.85em 1em;\n$button-margin: 0 0 $global-margin 0;\n$button-fill: solid;\n$button-background: $primary-color;\n$button-background-hover: scale-color($button-background, $lightness: -15%);\n$button-color: $white;\n$button-color-alt: $black;\n$button-radius: $global-radius;\n$button-hollow-border-width: 1px;\n$button-sizes: (\n    tiny: 0.6rem,\n    small: 0.75rem,\n    default: 0.9rem,\n    large: 1.25rem,\n);\n$button-palette: $foundation-palette;\n$button-opacity-disabled: 0.25;\n$button-background-hover-lightness: -20%;\n$button-hollow-hover-lightness: -50%;\n$button-transition: background-color 0.25s ease-out, color 0.25s ease-out;\n\n// 12. Button Group\n// ----------------\n\n$buttongroup-margin: 1rem;\n$buttongroup-spacing: 1px;\n$buttongroup-child-selector: '.button';\n$buttongroup-expand-max: 6;\n$buttongroup-radius-on-each: true;\n\n// 13. Callout\n// -----------\n\n$callout-background: $white;\n$callout-background-fade: 85%;\n$callout-border: 1px solid rgba($black, 0.25);\n$callout-margin: 0 0 1rem 0;\n$callout-padding: 1rem;\n$callout-font-color: $body-font-color;\n$callout-font-color-alt: $body-background;\n$callout-radius: $global-radius;\n$callout-link-tint: 30%;\n\n// 14. Card\n// --------\n\n$card-background: $white;\n$card-font-color: $body-font-color;\n$card-divider-background: $light-gray;\n$card-border: 1px solid $light-gray;\n$card-shadow: none;\n$card-border-radius: $global-radius;\n$card-padding: $global-padding;\n$card-margin-bottom: $global-margin;\n\n// 15. Close Button\n// ----------------\n\n$closebutton-position: right top;\n$closebutton-offset-horizontal: (\n    small: 0.66rem,\n    medium: 1rem,\n);\n$closebutton-offset-vertical: (\n    small: 0.33em,\n    medium: 0.5rem,\n);\n$closebutton-size: (\n    small: 1.5em,\n    medium: 2em,\n);\n$closebutton-lineheight: 1;\n$closebutton-color: $dark-gray;\n$closebutton-color-hover: $black;\n\n// 16. Drilldown\n// -------------\n\n$drilldown-transition: transform 0.15s linear;\n$drilldown-arrows: true;\n$drilldown-padding: $global-menu-padding;\n$drilldown-nested-margin: 0;\n$drilldown-background: $white;\n$drilldown-submenu-padding: $drilldown-padding;\n$drilldown-submenu-background: $white;\n$drilldown-arrow-color: $primary-color;\n$drilldown-arrow-size: 6px;\n\n// 17. Dropdown\n// ------------\n\n$dropdown-padding: 1rem;\n$dropdown-background: $body-background;\n$dropdown-border: 1px solid $medium-gray;\n$dropdown-font-size: 1rem;\n$dropdown-width: 300px;\n$dropdown-radius: $global-radius;\n$dropdown-sizes: (\n    tiny: 100px,\n    small: 200px,\n    large: 400px,\n);\n\n// 18. Dropdown Menu\n// -----------------\n\n$dropdownmenu-arrows: true;\n$dropdownmenu-arrow-color: $anchor-color;\n$dropdownmenu-arrow-size: 6px;\n$dropdownmenu-arrow-padding: 1.5rem;\n$dropdownmenu-min-width: 200px;\n$dropdownmenu-background: $dark-gray;\n$dropdownmenu-submenu-background: $dropdownmenu-background;\n$dropdownmenu-padding: $global-menu-padding;\n$dropdownmenu-nested-margin: 0;\n$dropdownmenu-submenu-padding: $dropdownmenu-padding;\n$dropdownmenu-border: 1px solid $medium-gray;\n$dropdown-menu-item-color-active: get-color(primary);\n$dropdown-menu-item-background-active: transparent;\n\n// 19. Flexbox Utilities\n// ---------------------\n\n$flex-source-ordering-count: 6;\n$flexbox-responsive-breakpoints: true;\n\n// 20. Forms\n// ---------\n\n$fieldset-border: 1px solid $medium-gray;\n$fieldset-padding: rem-calc(20);\n$fieldset-margin: rem-calc(18 0);\n$legend-padding: rem-calc(0 3);\n$form-spacing: rem-calc(16);\n$helptext-color: $black;\n$helptext-font-size: rem-calc(13);\n$helptext-font-style: italic;\n$input-prefix-color: $black;\n$input-prefix-background: $light-gray;\n$input-prefix-border: 1px solid $medium-gray;\n$input-prefix-padding: 1rem;\n$form-label-color: $black;\n$form-label-font-size: rem-calc(14);\n$form-label-font-weight: $global-weight-normal;\n$form-label-line-height: 1.8;\n$select-background: $white;\n$select-triangle-color: $dark-gray;\n$select-radius: $global-radius;\n$input-color: $black;\n$input-placeholder-color: $medium-gray;\n$input-font-family: inherit;\n$input-font-size: rem-calc(16);\n$input-font-weight: $global-weight-normal;\n$input-line-height: $global-lineheight;\n$input-background: $white;\n$input-background-focus: $white;\n$input-background-disabled: $light-gray;\n$input-border: 1px solid $medium-gray;\n$input-border-focus: 1px solid $dark-gray;\n$input-padding: $form-spacing / 2;\n$input-shadow: inset 0 1px 2px rgba($black, 0.1);\n$input-shadow-focus: 0 0 5px $medium-gray;\n$input-cursor-disabled: not-allowed;\n$input-transition: box-shadow 0.5s, border-color 0.25s ease-in-out;\n$input-number-spinners: true;\n$input-radius: $global-radius;\n$form-button-radius: $global-radius;\n\n// 21. Label\n// ---------\n\n$label-background: $primary-color;\n$label-color: $white;\n$label-color-alt: $black;\n$label-palette: $foundation-palette;\n$label-font-size: 0.8rem;\n$label-padding: 0.33333rem 0.5rem;\n$label-radius: $global-radius;\n\n// 22. Media Object\n// ----------------\n\n$mediaobject-margin-bottom: $global-margin;\n$mediaobject-section-padding: $global-padding;\n$mediaobject-image-width-stacked: 100%;\n\n// 23. Menu\n// --------\n\n$menu-margin: 0;\n$menu-nested-margin: $global-menu-nested-margin;\n$menu-items-padding: $global-menu-padding;\n$menu-simple-margin: 1rem;\n$menu-item-color-active: $dark-gray;\n$menu-item-background-active: get-color(primary);\n$menu-icon-spacing: 0.25rem;\n$menu-item-background-hover: $light-gray;\n$menu-state-back-compat: true;\n$menu-centered-back-compat: true;\n$menu-icons-back-compat: true;\n\n// 24. Meter\n// ---------\n\n$meter-height: 1rem;\n$meter-radius: $global-radius;\n$meter-background: $medium-gray;\n$meter-fill-good: $success-color;\n$meter-fill-medium: $warning-color;\n$meter-fill-bad: $alert-color;\n\n// 25. Off-canvas\n// --------------\n\n$offcanvas-sizes: (\n    small: 250px,\n);\n$offcanvas-vertical-sizes: (\n    small: 250px,\n);\n$offcanvas-background: $light-gray;\n$offcanvas-shadow: 0 0 10px rgba($black, 0.7);\n$offcanvas-inner-shadow-size: 20px;\n$offcanvas-inner-shadow-color: rgba($black, 0.25);\n$offcanvas-overlay-zindex: 11;\n$offcanvas-push-zindex: 12;\n$offcanvas-overlap-zindex: 13;\n$offcanvas-reveal-zindex: 12;\n$offcanvas-transition-length: 0.5s;\n$offcanvas-transition-timing: ease;\n$offcanvas-fixed-reveal: true;\n$offcanvas-exit-background: rgba($white, 0.25);\n$maincontent-class: 'off-canvas-content';\n\n// 26. Orbit\n// ---------\n\n$orbit-bullet-background: $medium-gray;\n$orbit-bullet-background-active: $dark-gray;\n$orbit-bullet-diameter: 1.2rem;\n$orbit-bullet-margin: 0.1rem;\n$orbit-bullet-margin-top: 0.8rem;\n$orbit-bullet-margin-bottom: 0.8rem;\n$orbit-caption-background: rgba($black, 0.5);\n$orbit-caption-padding: 1rem;\n$orbit-control-background-hover: rgba($black, 0.5);\n$orbit-control-padding: 1rem;\n$orbit-control-zindex: 10;\n\n// 27. Pagination\n// --------------\n\n$pagination-font-size: rem-calc(14);\n$pagination-margin-bottom: $global-margin;\n$pagination-item-color: $black;\n$pagination-item-padding: rem-calc(3 10);\n$pagination-item-spacing: rem-calc(1);\n$pagination-radius: $global-radius;\n$pagination-item-background-hover: $light-gray;\n$pagination-item-background-current: $primary-color;\n$pagination-item-color-current: $white;\n$pagination-item-color-disabled: $medium-gray;\n$pagination-ellipsis-color: $black;\n$pagination-mobile-items: false;\n$pagination-mobile-current-item: false;\n$pagination-arrows: true;\n\n// 28. Progress Bar\n// ----------------\n\n$progress-height: 1rem;\n$progress-background: $medium-gray;\n$progress-margin-bottom: $global-margin;\n$progress-meter-background: $primary-color;\n$progress-radius: $global-radius;\n\n// 29. Prototype Arrow\n// -------------------\n\n$prototype-arrow-directions: (\n    down,\n    up,\n    right,\n    left\n);\n$prototype-arrow-size: 0.4375rem;\n$prototype-arrow-color: $black;\n\n// 30. Prototype Border-Box\n// ------------------------\n\n$prototype-border-box-breakpoints: $global-prototype-breakpoints;\n\n// 31. Prototype Border-None\n// -------------------------\n\n$prototype-border-none-breakpoints: $global-prototype-breakpoints;\n\n// 32. Prototype Bordered\n// ----------------------\n\n$prototype-bordered-breakpoints: $global-prototype-breakpoints;\n$prototype-border-width: rem-calc(1);\n$prototype-border-type: solid;\n$prototype-border-color: $medium-gray;\n\n// 33. Prototype Display\n// ---------------------\n\n$prototype-display-breakpoints: $global-prototype-breakpoints;\n$prototype-display: (\n    inline,\n    inline-block,\n    block,\n    table,\n    table-cell\n);\n\n// 34. Prototype Font-Styling\n// --------------------------\n\n$prototype-font-breakpoints: $global-prototype-breakpoints;\n$prototype-wide-letter-spacing: rem-calc(4);\n$prototype-font-normal: $global-weight-normal;\n$prototype-font-bold: $global-weight-bold;\n\n// 35. Prototype List-Style-Type\n// -----------------------------\n\n$prototype-list-breakpoints: $global-prototype-breakpoints;\n$prototype-style-type-unordered: (\n    disc,\n    circle,\n    square\n);\n$prototype-style-type-ordered: (\n    decimal,\n    lower-alpha,\n    lower-latin,\n    lower-roman,\n    upper-alpha,\n    upper-latin,\n    upper-roman\n);\n\n// 36. Prototype Overflow\n// ----------------------\n\n$prototype-overflow-breakpoints: $global-prototype-breakpoints;\n$prototype-overflow: (\n    visible,\n    hidden,\n    scroll\n);\n\n// 37. Prototype Position\n// ----------------------\n\n$prototype-position-breakpoints: $global-prototype-breakpoints;\n$prototype-position: (\n    static,\n    relative,\n    absolute,\n    fixed\n);\n$prototype-position-z-index: 975;\n\n// 38. Prototype Rounded\n// ---------------------\n\n$prototype-rounded-breakpoints: $global-prototype-breakpoints;\n$prototype-border-radius: rem-calc(3);\n\n// 39. Prototype Separator\n// -----------------------\n\n$prototype-separator-breakpoints: $global-prototype-breakpoints;\n$prototype-separator-align: center;\n$prototype-separator-height: rem-calc(2);\n$prototype-separator-width: 3rem;\n$prototype-separator-background: $primary-color;\n$prototype-separator-margin-top: $global-margin;\n\n// 40. Prototype Shadow\n// --------------------\n\n$prototype-shadow-breakpoints: $global-prototype-breakpoints;\n$prototype-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16),\n0 2px 10px 0 rgba(0, 0, 0, 0.12);\n\n// 41. Prototype Sizing\n// --------------------\n\n$prototype-sizing-breakpoints: $global-prototype-breakpoints;\n$prototype-sizing: (\n    width,\n    height\n);\n$prototype-sizes: (\n    25: 25%,\n    50: 50%,\n    75: 75%,\n    100: 100%\n);\n\n// 42. Prototype Spacing\n// ---------------------\n\n$prototype-spacing-breakpoints: $global-prototype-breakpoints;\n$prototype-spacers-count: 3;\n\n// 43. Prototype Text-Decoration\n// -----------------------------\n\n$prototype-decoration-breakpoints: $global-prototype-breakpoints;\n$prototype-text-decoration: (\n    overline,\n    underline,\n    line-through,\n);\n\n// 44. Prototype Text-Transformation\n// ---------------------------------\n\n$prototype-transformation-breakpoints: $global-prototype-breakpoints;\n$prototype-text-transformation: (\n    lowercase,\n    uppercase,\n    capitalize\n);\n\n// 45. Prototype Text-Utilities\n// ----------------------------\n\n$prototype-utilities-breakpoints: $global-prototype-breakpoints;\n$prototype-text-overflow: ellipsis;\n\n// 46. Responsive Embed\n// --------------------\n\n$responsive-embed-margin-bottom: rem-calc(16);\n$responsive-embed-ratios: (\n    default: 4 by 3,\n    widescreen: 16 by 9,\n);\n\n// 47. Reveal\n// ----------\n\n$reveal-background: $white;\n$reveal-width: 600px;\n$reveal-max-width: $global-width;\n$reveal-padding: $global-padding;\n$reveal-border: 1px solid $medium-gray;\n$reveal-radius: $global-radius;\n$reveal-zindex: 1005;\n$reveal-overlay-background: rgba($black, 0.45);\n\n// 48. Slider\n// ----------\n\n$slider-width-vertical: 0.5rem;\n$slider-transition: all 0.2s ease-in-out;\n$slider-height: 0.5rem;\n$slider-background: $light-gray;\n$slider-fill-background: $medium-gray;\n$slider-handle-height: 1.4rem;\n$slider-handle-width: 1.4rem;\n$slider-handle-background: $primary-color;\n$slider-opacity-disabled: 0.25;\n$slider-radius: $global-radius;\n\n// 49. Switch\n// ----------\n\n$switch-background: $medium-gray;\n$switch-background-active: $primary-color;\n$switch-height: 2rem;\n$switch-height-tiny: 1.5rem;\n$switch-height-small: 1.75rem;\n$switch-height-large: 2.5rem;\n$switch-radius: $global-radius;\n$switch-margin: $global-margin;\n$switch-paddle-background: $white;\n$switch-paddle-offset: 0.25rem;\n$switch-paddle-radius: $global-radius;\n$switch-paddle-transition: all 0.25s ease-out;\n\n// 50. Table\n// ---------\n\n$table-background: $white;\n$table-color-scale: 5%;\n$table-border: 1px solid smart-scale($table-background, $table-color-scale);\n$table-padding: rem-calc(8 10 10);\n$table-hover-scale: 2%;\n$table-row-hover: darken($table-background, $table-hover-scale);\n$table-row-stripe-hover: darken($table-background, $table-color-scale + $table-hover-scale);\n$table-is-striped: true;\n$table-striped-background: smart-scale($table-background, $table-color-scale);\n$table-stripe: even;\n$table-head-background: smart-scale($table-background, $table-color-scale / 2);\n$table-head-row-hover: darken($table-head-background, $table-hover-scale);\n$table-foot-background: smart-scale($table-background, $table-color-scale);\n$table-foot-row-hover: darken($table-foot-background, $table-hover-scale);\n$table-head-font-color: $body-font-color;\n$table-foot-font-color: $body-font-color;\n$show-header-for-stacked: false;\n$table-stack-breakpoint: medium;\n\n// 51. Tabs\n// --------\n\n$tab-margin: 0;\n$tab-background: $white;\n$tab-color: $primary-color;\n$tab-background-active: $light-gray;\n$tab-active-color: $primary-color;\n$tab-item-font-size: rem-calc(12);\n$tab-item-background-hover: $white;\n$tab-item-padding: 1.25rem 1.5rem;\n$tab-expand-max: 6;\n$tab-content-background: $white;\n$tab-content-border: $light-gray;\n$tab-content-color: $body-font-color;\n$tab-content-padding: 1rem;\n\n// 52. Thumbnail\n// -------------\n\n$thumbnail-border: solid 4px $white;\n$thumbnail-margin-bottom: $global-margin;\n$thumbnail-shadow: 0 0 0 1px rgba($black, 0.2);\n$thumbnail-shadow-hover: 0 0 6px 1px rgba($primary-color, 0.5);\n$thumbnail-transition: box-shadow 200ms ease-out;\n$thumbnail-radius: $global-radius;\n\n// 53. Title Bar\n// -------------\n\n$titlebar-background: $black;\n$titlebar-color: $white;\n$titlebar-padding: $global-menu-padding;\n$titlebar-text-font-weight: bold;\n$titlebar-icon-color: $white;\n$titlebar-icon-color-hover: $medium-gray;\n$titlebar-icon-spacing: 0.25rem;\n\n// 54. Tooltip\n// -----------\n\n$has-tip-cursor: help;\n$has-tip-font-weight: $global-weight-bold;\n$has-tip-border-bottom: dotted 1px $dark-gray;\n$tooltip-background-color: $black;\n$tooltip-color: $white;\n$tooltip-padding: 0.75rem;\n$tooltip-max-width: 10rem;\n$tooltip-font-size: $small-font-size;\n$tooltip-pip-width: 0.75rem;\n$tooltip-pip-height: $tooltip-pip-width * 0.866;\n$tooltip-radius: $global-radius;\n\n// 55. Top Bar\n// -----------\n\n$topbar-padding: 0;\n$topbar-background: $white;\n$topbar-submenu-background: $topbar-background;\n$topbar-title-spacing: 0.45rem;\n$topbar-input-width: 200px;\n$topbar-unstack-breakpoint: medium;\n\n// 56. Xy Grid\n// -----------\n\n$xy-grid: true;\n$grid-container: $global-width;\n$grid-columns: 12;\n$grid-margin-gutters: (\n    small: 20px,\n    medium: 30px\n);\n$grid-padding-gutters: $grid-margin-gutters;\n$grid-container-padding: $grid-padding-gutters;\n$grid-container-max: $global-width;\n$xy-block-grid-max: 8;\n\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // First, lets convert our $base to pixels\n\n  // If the base font size is a %, then multiply it by 16px\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if unit($base) == 'em' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  // Now lets convert our value to pixels too\n  @if unit($value) == '%' {\n    $value: ($value / 100%) * $base;\n  }\n\n  @if unit($value) == 'rem' {\n    $value: strip-unit($value) * $base;\n  }\n\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * $base;\n  }\n\n  // 'px'\n  @if unit($value) == 'px' {\n    @return strip-unit($value) / strip-unit($base);\n  }\n\n  // assume that line-heights greatern then 10 are meant to be absolute in 'px'\n  @if unitless($value) and ($value > 10) {\n    @return $value / strip-unit($base);\n  }\n\n  @return $value;\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'Your smallest breakpoint (defined in $breakpoints) must be set to \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - (1/16);\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  @if $old-zf-size != null {\n    // Restore the old breakpoint size\n    $-zf-size: $old-zf-size !global;\n  } @else {\n    $-zf-size: null !global;\n  }\n}\n\n/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoing - a named or non-named breakpoing.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group typography-helpers\n////\n\n/// Default font size for lead paragraphs.\n/// @type Number\n$lead-font-size: $global-font-size * 1.25 !default;\n\n/// Default line height for lead paragraphs.\n/// @type String\n$lead-lineheight: 1.6 !default;\n\n/// Default line height for subheaders.\n/// @type Number\n$subheader-lineheight: 1.4 !default;\n\n/// Default font color for subheaders.\n/// @type Color\n$subheader-color: $dark-gray !default;\n\n/// Default font weight for subheaders.\n/// @type String\n$subheader-font-weight: $global-weight-normal !default;\n\n/// Default top margin for subhheaders.\n/// @type Number\n$subheader-margin-top: 0.2rem !default;\n\n/// Default bottom margin for subheaders.\n/// @type Number\n$subheader-margin-bottom: 0.5rem !default;\n\n/// Default font size for statistic numbers.\n/// @type Number\n$stat-font-size: 2.5rem !default;\n\n@mixin foundation-typography-helpers {\n  // Use to create a subheading under a main header\n  // Make sure you pair the two elements in a <header> element, like this:\n  // <header>\n  //   <h1>Heading</h1>\n  //   <h2>Subheading</h2>\n  // </header>\n  .subheader {\n    margin-top: $subheader-margin-top;\n    margin-bottom: $subheader-margin-bottom;\n\n    font-weight: $subheader-font-weight;\n    line-height: $subheader-lineheight;\n    color: $subheader-color;\n  }\n\n  // Use to style an introductory lead, deck, blurb, etc.\n  .lead {\n    font-size: $lead-font-size;\n    line-height: $lead-lineheight;\n  }\n\n  // Use to style a large number to display a statistic\n  .stat {\n    font-size: $stat-font-size;\n    line-height: 1;\n\n    p + & {\n      margin-top: -1rem;\n    }\n  }\n\n  ul, ol {\n    // Use to remove numbers from ordered list & bullets from unordered list\n    &.no-bullet {\n      margin-#{$global-left}: 0;\n      list-style: none;\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n@mixin foundation-text-alignment {\n  @each $size in $breakpoint-classes {\n    @include breakpoint($size) {\n      @each $align in (left, right, center, justify) {\n        @if $size != $-zf-zero-breakpoint {\n          .#{$size}-text-#{$align} {\n            text-align: $align;\n          }\n        }\n        @else {\n          .text-#{$align} {\n            text-align: $align;\n          }\n        }\n      }\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n/// If `true`, all elements will have transparent backgrounds when printed, to save on ink.\n/// @type Boolean\n/// @group global\n$print-transparent-backgrounds: true !default;\n$print-hrefs: true !default;\n\n// sass-lint:disable-all\n\n@mixin foundation-print-styles {\n  .show-for-print { display: none !important; }\n\n  @media print {\n    * {\n      @if $print-transparent-backgrounds {\n        background: transparent !important;\n      }\n\n      box-shadow: none !important;\n\n      color: black !important; // Black prints faster: h5bp.com/s\n      text-shadow: none !important;\n    }\n\n    .show-for-print { display: block !important; }\n    .hide-for-print { display: none !important; }\n\n    table.show-for-print { display: table !important; }\n    thead.show-for-print { display: table-header-group !important; }\n    tbody.show-for-print { display: table-row-group !important; }\n    tr.show-for-print { display: table-row !important; }\n    td.show-for-print { display: table-cell !important; }\n    th.show-for-print { display: table-cell !important; }\n\n    // Display the URL of a link after the text\n    a,\n    a:visited { text-decoration: underline;}\n    @if $print-hrefs {\n      a[href]:after { content: ' (' attr(href) ')'; }\n    }\n\n    // Don't display the URL for images or JavaScript/internal links\n    .ir a:after,\n    a[href^='javascript:']:after,\n    a[href^='#']:after { content: ''; }\n\n    // Display what an abbreviation stands for after the text\n    abbr[title]:after { content: ' (' attr(title) ')'; }\n\n    // Prevent page breaks in the middle of a blockquote or preformatted text block\n    pre,\n    blockquote {\n      border: 1px solid $dark-gray;\n      page-break-inside: avoid;\n    }\n\n    // h5bp.com/t\n    thead { display: table-header-group; }\n\n    tr,\n    img { page-break-inside: avoid; }\n\n    img { max-width: 100% !important; }\n\n    @page { margin: 0.5cm; }\n\n    p,\n    h2,\n    h3 {\n      orphans: 3;\n      widows: 3;\n    }\n\n    // Avoid page breaks after a heading\n    h2,\n    h3 { page-break-after: avoid; }\n\n    // Helper to re-allow page breaks in the middle of certain elements (e.g. pre, blockquote, tr)\n    .print-break-inside {\n      page-break-inside: auto;\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n// sass-lint:disable force-element-nesting, no-qualifying-elements\n\n////\n/// @group table\n////\n\n/// Default color for table background.\n/// @type Color\n$table-background: $white  !default;\n\n/// Default scale for darkening the striped table rows and the table border.\n/// @type Number\n$table-color-scale: 5% !default;\n\n/// Default style for table border.\n/// @type List\n$table-border: 1px solid smart-scale($table-background, $table-color-scale) !default;\n\n/// Default padding for table.\n/// @type Number\n$table-padding: rem-calc(8 10 10) !default;\n\n/// Default scale for darkening the table rows on hover.\n/// @type Number\n$table-hover-scale: 2% !default;\n\n/// Default color of standard rows on hover.\n/// @type List\n$table-row-hover: darken($table-background, $table-hover-scale) !default;\n\n/// Default color of striped rows on hover.\n/// @type List\n$table-row-stripe-hover: darken($table-background, $table-color-scale + $table-hover-scale) !default;\n\n/// If `true`, tables are striped by default and an .unstriped class is created. If `false`, a .striped class is created.\n/// @type Boolean\n$table-is-striped: true !default;\n\n/// Default background color for striped rows.\n/// @type Color\n$table-striped-background: smart-scale($table-background, $table-color-scale) !default;\n\n/// Default value for showing the stripe on rows of the tables, excluding the header and footer. If even, the even rows will have a background color. If odd, the odd rows will have a background color. If empty, or any other value, the table rows will have no striping.\n/// @type Keyword\n$table-stripe: even !default;\n\n/// Default color for header background.\n/// @type Color\n$table-head-background: smart-scale($table-background, $table-color-scale / 2) !default;\n\n/// Default color of header rows on hover.\n/// @type List\n$table-head-row-hover: darken($table-head-background, $table-hover-scale) !default;\n\n/// Default color for footer background.\n/// @type Color\n$table-foot-background: smart-scale($table-background, $table-color-scale) !default;\n\n/// Default color of footer rows on hover.\n/// @type List\n$table-foot-row-hover: darken($table-foot-background, $table-hover-scale) !default;\n\n/// Default font color for header.\n/// @type Color\n$table-head-font-color: $body-font-color !default;\n\n/// Default font color for footer.\n/// @type Color\n$table-foot-font-color: $body-font-color !default;\n\n/// Default value for showing the header when using stacked tables.\n/// @type Boolean\n$show-header-for-stacked: false !default;\n\n/// Breakpoint at which stacked table switches from mobile to desktop view.\n/// @type Breakpoint\n$table-stack-breakpoint: medium !default;\n\n@mixin -zf-table-stripe($stripe: $table-stripe) {\n  tr {\n    // If stripe is set to even, darken the even rows.\n    @if $stripe == even {\n      &:nth-child(even) {\n        border-bottom: 0;\n        background-color: $table-striped-background;\n      }\n    }\n\n    // If stripe is set to odd, darken the odd rows.\n    @else if $stripe == odd {\n      &:nth-child(odd) {\n        background-color: $table-striped-background;\n      }\n    }\n  }\n}\n\n@mixin -zf-table-unstripe() {\n  tr {\n    border-bottom: 0;\n    border-bottom: $table-border;\n    background-color: $table-background;\n  }\n}\n\n@mixin -zf-table-children-styles($stripe: $table-stripe, $is-striped: $table-is-striped) {\n  thead,\n  tbody,\n  tfoot {\n    border: $table-border;\n    background-color: $table-background;\n  }\n\n  // Caption\n  caption {\n    padding: $table-padding;\n    font-weight: $global-weight-bold;\n  }\n\n  // Table head\n  thead {\n    background: $table-head-background;\n    color: $table-head-font-color;\n  }\n\n  // Table foot\n  tfoot {\n    background: $table-foot-background;\n    color: $table-foot-font-color;\n  }\n\n  // Table head and foot\n  thead,\n  tfoot {\n    // Rows within head and foot\n    tr {\n      background: transparent;\n    }\n\n    // Cells within head and foot\n    th,\n    td {\n      padding: $table-padding;\n      font-weight: $global-weight-bold;\n      text-align: #{$global-left};\n    }\n  }\n\n  // Table rows\n  tbody {\n    th,\n    td {\n      padding: $table-padding;\n    }\n  }\n\n  // If tables are striped\n  @if $is-striped == true {\n    tbody {\n      @include -zf-table-stripe($stripe);\n    }\n\n    &.unstriped {\n      tbody {\n        @include -zf-table-unstripe();\n        background-color: $table-background;\n      }\n    }\n  }\n\n  // If tables are not striped\n  @else if $is-striped == false {\n    tbody {\n      @include -zf-table-unstripe();\n    }\n\n    &.striped {\n      tbody {\n        @include -zf-table-stripe($stripe);\n      }\n    }\n  }\n}\n\n/// Adds the general styles for tables.\n/// @param {Keyword} $stripe [$table-stripe] - Uses keywords even, odd, or none to darken rows of the table. The default value is even.\n@mixin table(\n  $stripe: $table-stripe,\n  $nest: false\n) {\n  border-collapse: collapse;\n  width: 100%;\n  margin-bottom: $global-margin;\n  border-radius: $global-radius;\n\n  @if $nest {\n    @include -zf-table-children-styles($stripe);\n  }\n  @else {\n    @at-root {\n      @include -zf-table-children-styles($stripe);\n    }\n  }\n}\n\n/// Adds the ability to horizontally scroll the table when the content overflows horizontally.\n@mixin table-scroll {\n  display: block;\n  width: 100%;\n  overflow-x: auto;\n}\n\n/// Slightly darkens the table rows on hover.\n@mixin table-hover {\n  thead tr {\n    //Darkens the table header rows on hover.\n    &:hover {\n      background-color: $table-head-row-hover;\n    }\n  }\n\n  tfoot tr {\n    //Darkens the table footer rows on hover.\n    &:hover {\n      background-color: $table-foot-row-hover;\n    }\n  }\n\n  tbody tr {\n    //Darkens the non-striped table rows on hover.\n    &:hover {\n      background-color: $table-row-hover;\n    }\n  }\n\n  @if $table-is-striped == true {\n    // Darkens the even striped table rows.\n    @if($table-stripe == even) {\n      &:not(.unstriped) tr:nth-of-type(even):hover {\n        background-color: $table-row-stripe-hover;\n      }\n    }\n\n    // Darkens the odd striped table rows.\n    @elseif($table-stripe == odd) {\n      &:not(.unstriped) tr:nth-of-type(odd):hover {\n        background-color: $table-row-stripe-hover;\n      }\n    }\n  }\n\n  @else if $table-is-striped == false {\n    // Darkens the even striped table rows.\n    @if($table-stripe == even) {\n      &.striped tr:nth-of-type(even):hover {\n        background-color: $table-row-stripe-hover;\n      }\n    }\n\n    // Darkens the odd striped table rows.\n    @elseif($table-stripe == odd) {\n      &.striped tr:nth-of-type(odd):hover {\n        background-color: $table-row-stripe-hover;\n      }\n    }\n  }\n}\n\n/// Adds styles for a stacked table. Useful for small-screen layouts.\n/// @param {Boolean} $header [$show-header-for-stacked] - Show the first th of header when stacked.\n@mixin table-stack($header: $show-header-for-stacked) {\n  @if $header {\n    thead {\n      th {\n        display: block;\n      }\n    }\n  }\n  @else {\n    thead {\n      display: none;\n    }\n  }\n\n  tfoot {\n    display: none;\n  }\n\n  tr,\n  th,\n  td {\n    display: block;\n  }\n\n  td {\n    border-top: 0;\n  }\n}\n\n@mixin foundation-table($nest: false) {\n  table {\n    @include table($nest: $nest);\n  }\n\n  table.stack {\n    @include breakpoint($table-stack-breakpoint down) {\n      @include table-stack;\n    }\n  }\n\n  table.scroll {\n    @include table-scroll;\n  }\n\n  table.hover {\n    @include table-hover;\n  }\n\n  .table-scroll {\n    overflow-x: auto;\n\n    table {\n      width: auto;\n    }\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n@import 'math';\n\n$contrast-warnings: true !default;\n\n////\n/// @group functions\n////\n\n/// Checks the luminance of `$color`.\n///\n/// @param {Color} $color - Color to check the luminance of.\n///\n/// @returns {Number} The luminance of `$color`.\n@function color-luminance($color) {\n  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js\n  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  $rgba: red($color), green($color), blue($color);\n  $rgba2: ();\n\n  @for $i from 1 through 3 {\n    $rgb: nth($rgba, $i);\n    $rgb: $rgb / 255;\n\n    $rgb: if($rgb < 0.03928, $rgb / 12.92, pow(($rgb + 0.055) / 1.055, 2.4));\n\n    $rgba2: append($rgba2, $rgb);\n  }\n\n  @return 0.2126 * nth($rgba2, 1) + 0.7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);\n}\n\n/// Checks the contrast ratio of two colors.\n///\n/// @param {Color} $color1 - First color to compare.\n/// @param {Color} $color2 - Second color to compare.\n///\n/// @returns {Number} The contrast ratio of the compared colors.\n@function color-contrast($color1, $color2) {\n  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js\n  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n  $luminance1: color-luminance($color1) + 0.05;\n  $luminance2: color-luminance($color2) + 0.05;\n  $ratio: $luminance1 / $luminance2;\n\n  @if $luminance2 > $luminance1 {\n    $ratio: 1 / $ratio;\n  }\n\n  $ratio: round($ratio * 10) / 10;\n\n  @return $ratio;\n}\n\n/// Checks the luminance of `$base`, and returns the color from `$colors` (list of colors) that has the most contrast.\n///\n/// @param {Color} $base - Color to check luminance.\n/// @param {List} $colors [($white, $black)] - Colors to compare.\n/// @param {Number} $tolerance [$global-color-pick-contrast-tolerance] - Contrast tolerance.\n///\n/// @returns {Color} the color from `$colors` (list of colors) that has the most contrast.\n@function color-pick-contrast($base, $colors: ($white, $black), $tolerance: $global-color-pick-contrast-tolerance) {\n  $contrast: color-contrast($base, nth($colors, 1));\n  $best: nth($colors, 1);\n\n  @for $i from 2 through length($colors) {\n    $current-contrast: color-contrast($base, nth($colors, $i));\n    @if ($current-contrast - $contrast > $tolerance) {\n      $contrast: color-contrast($base, nth($colors, $i));\n      $best: nth($colors, $i);\n    }\n  }\n\n  @if ($contrast-warnings and $contrast < 3) {\n    @warn \"Contrast ratio of #{$best} on #{$base} is pretty bad, just #{$contrast}\";\n  }\n\n  @return $best;\n}\n\n/// Scales a color to be darker if it's light, or lighter if it's dark. Use this function to tint a color appropriate to its lightness.\n///\n/// @param {Color} $color - Color to scale.\n/// @param {Percentage} $scale [5%] - Amount to scale up or down.\n/// @param {Percentage} $threshold [40%] - Threshold of lightness to check against.\n///\n/// @returns {Color} A scaled color.\n@function smart-scale($color, $scale: 5%, $threshold: 40%) {\n  @if lightness($color) > $threshold {\n    $scale: -$scale;\n  }\n  @return scale-color($color, $lightness: $scale);\n}\n\n/// Get color from foundation-palette\n///\n/// @param {key} color key from foundation-palette\n///\n/// @returns {Color} color from foundation-palette\n@function get-color($key) {\n  @if map-has-key($foundation-palette, $key) {\n    @return map-get($foundation-palette, $key);\n  }\n  @else {\n    @error 'given $key is not available in $foundation-palette';\n  }\n}\n\n/// Transfers the colors in the `$foundation-palette`map into variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase.\n@mixin add-foundation-colors() {\n  @if map-has-key($foundation-palette, primary) {\n    $primary-color: map-get($foundation-palette, primary) !global;\n  }\n  @if map-has-key($foundation-palette, secondary) {\n    $secondary-color: map-get($foundation-palette, secondary) !global;\n  }\n  @if map-has-key($foundation-palette, success) {\n    $success-color: map-get($foundation-palette, success) !global;\n  }\n  @if map-has-key($foundation-palette, warning) {\n    $warning-color: map-get($foundation-palette, warning) !global;\n  }\n  @if map-has-key($foundation-palette, alert) {\n    $alert-color: map-get($foundation-palette, alert) !global;\n  }\n}\n","//RTE\n.cke_editable {\n  font-size: $global-font-size;\n  font-family: $body-font-family;\n}\n\n//.htmlarea-content-body {\n//  background-color: #f90;\n//  font-size: $global-font-size;\n//  font-family: $body-font-family;\n//  p {\n//    border: 1px solid $light-gray;\n//    position: relative;\n//    &:before {\n//      content: \"p\";\n//      position: absolute;\n//      left: 0;\n//      top: 0;\n//      z-index: -1;\n//      color: $light-gray;\n//      font-size: 85%;\n//    }\n//    p[value=\" \"] {\n//      background-color: orange;\n//    }\n//  }\n//}\n\n/* Left, center, right and justify alignment of text in block elements*/\np, td, th,\nh1, h2, h3, h4, h5, h6,\ndiv, address {\n  &.align-left {\n    text-align: left;\n  }\n  &.align-center {\n    text-align: center;\n  }\n  &.align-right {\n    text-align: right;\n  }\n  &.align-justify {\n    text-align: justify;\n  }\n}\n\nspan {\n  &.c-important {\n    color: #f90;\n  }\n  &.c-tiny {\n    color: #999999;\n    font-size: 75%;\n  }\n}\n\np {\n  &.p-tiny {\n    color: #999999;\n    font-size: 75%;\n  }\n}\n\n/* Bullet styles for unordered lists.*/\nul.component-items {\n  color: #186900;\n  list-style-type: circle;\n}\n\nul.ul-style1 {\n  color: #8A0020;\n  //list-style-image: url(../../Images/red_arrow_bullet.png);\n}\n\n/* Numbering styles for ordered lists.*/\nol.ul-style2 {\n  color: #10007B;\n  list-style-type: lower-roman;\n}\n\n//ol.action-items-ordered {\n//  color: #8A0020;\n//  list-style-type: lower-greek;\n//}\n\n/* Selectors for the default configuration of the link accessibity feature.*/\na.external-link {\n}\n\na.external-link-new-window {\n}\n\na.internal-link {\n}\n\na.internal-link-new-window {\n}\n\na.download {\n}\n\na.mail {\n}\n\n/* Default selector for indentation.*/\ndiv.indent {\n  margin-left: 2em;\n}\n"]}
>>>>>>> master
